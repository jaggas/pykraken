openapi: 3.0.0
servers:
  - url: https://api.kraken.com/0
    description: Production Server
info:
  title: REST API
  contact:
    name: Support
    url: >-
      https://support.kraken.com/hc/en-us/requests/new?ticket_form_id=360000104043
  version: 1.0.0
  x-logo:
    url: kraken_logo_w.png
    altText: Kraken Logo
  description: >
    # General Usage


    This document details use of Kraken's REST API for our spot exchange. The
    [Websockets API](https://docs.kraken.com/websockets) and [Kraken Futures
    API](https://support.kraken.com/hc/en-us/sections/360012894412-Futures-API)
    are documented separately. Our REST API is organised into publicly
    accessible endpoints (market data, exchange status, etc.), and private
    authenticated endpoints (trading, funding, user data) which require requests
    to be signed.


    ## Support 


    Further information and FAQs may be found on the [API
    section](https://support.kraken.com/hc/en-us/sections/4402371110548-API) of
    our support pages. If you have trouble making any standard requests that our
    system permits, please [send
    us](https://support.kraken.com/hc/en-us/requests/new?ticket_form_id=360000104043)
    a full copy of the request(s) that you're attempting, including your IP
    address and all headers, so that we may investigate further.


    ## Requests, Responses and Errors


    ### Requests

    Request payloads are
    [form-encoded](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST)
    (`Content-Type: application/x-www-form-urlencoded`), and all requests must
    specify a `User-Agent` in their headers.


    ### Responses

    Responses are JSON encoded and contain one or two top-level keys (`result`
    and `error` for successful requests or those with warnings, or only `error`
    for failed or rejected requests)


    #### Example Successful Response

    ```javascript

    {
      "error": [],
      "result": {
        "status": "online",
        "timestamp": "2021-03-22T17:18:03Z"
      }
    }

    ```

    > GET https://api.kraken.com/0/public/SystemStatus


    #### Example Rejection

    ```javascript

    {
      "error": [
        "EGeneral:Invalid arguments:ordertype"
      ]
    }

    ```


    ### Error Details


    HTTP status codes are generally not used by our API to convey information
    about the state of requests -- any errors or warnings are denoted in the
    `error` field of the response as described above. Status codes __other__
    than 200 indicate that there was an issue with the request reaching our
    servers.


    `error` messages follow the general format `<severity><category>`:`<error
    msg>`[`:add'l text`]


    * `severity` can be either `E` for error or `W` for warning

    * `category` can be one of `General`, `Auth`, `API`, `Query`, `Order`,
    `Trade`, `Funding`, or `Service`

    * `error msg` can be any text string that describes the reason for the error


    #### Some Common Examples


    | Error | Additional Info |

    | -- | -- |

    | EGeneral:Invalid arguments | The request payload is malformed, incorrect
    or ambiguous. |

    | EGeneral:Invalid arguments:Index unavailable |  Index pricing is
    unavailable for stop/profit orders on this pair. |

    | EService:Unavailable | The matching engine or API is offline |

    | EService:Market in cancel_only mode | Request can't be made at this time.
    (See `SystemStatus` endpoint.) |

    | EService:Market in post_only mode | Request can't be made at this time.
    (See `SystemStatus` endpoint.) |   

    | EService:Deadline elapsed | The request timed out according to the default
    or specified `deadline` |

    | EAPI:Invalid key | An invalid `API-Key` header was supplied (see
    Authentication section) |

    | EAPI:Invalid signature | An invalid `API-Sign` header was supplied (see
    Authentication section) |

    | EAPI:Invalid nonce | An invalid `nonce` was supplied (see Authentication
    section) |

    | EGeneral:Permission denied | API key doesn't have permission to make this
    request. |    

    | EOrder:Cannot open position | User/tier is ineligible for margin trading |

    | EOrder:Margin allowance exceeded | User has exceeded their margin
    allowance |

    | EOrder:Margin level too low | Client has insufficient equity or collateral
    |

    | EOrder:Margin position size exceeded | Client would exceed the maximum
    position size for this pair |

    | EOrder:Insufficient margin | Exchange does not have available funds for
    this margin trade |

    | EOrder:Insufficient funds | Client does not have the necessary funds |

    | EOrder:Order minimum not met | Order size does not meet `ordermin`. (See
    `AssetPairs` endpoint.)  |

    | EOrder:Orders limit exceeded | (See Rate Limits section) |

    | EOrder:Rate limit exceeded | (See Rate Limits section) |

    | EOrder:Positions limit exceeded |  |

    | EOrder:Unknown position |  |


    Additional information can be found on our [support
    center](https://support.kraken.com/hc/en-us/articles/360001491786-API-error-messages).




    # Authentication


    Authenticated requests must include both `API-Key` and `API-Sign` HTTP
    headers, and `nonce` in the request payload. `otp` is also required in the
    payload if two-factor authentication (2FA) is enabled.



    ## Nonce and 2FA


    ### `nonce`


    Nonce must be an always increasing, unsigned 64-bit integer, for each
    request that is made with a particular API key. While a simple counter would
    provide a valid nonce, a more usual method of generating a valid nonce is to
    use e.g. a UNIX timestamp in milliseconds.


    > **Note:** There is no way to reset the nonce for an API key to a lower
    value, so be sure to use a nonce generation method that won't produce
    numbers less than the previous nonce. Too many requests with invalid nonces
    (EAPI:Invalid nonce) can result in temporary bans. Problems can arise from
    requests arriving out of order due to API keys being shared across
    processes, or from system clock drift/recalibration. An optional "nonce
    window" can be configured to specify a tolerance between nonce values.
    Additional info can be found in our [support
    pages](https://support.kraken.com/hc/en-us/articles/360000906023-What-is-a-nonce-).


    ### `otp`


    If two-factor authentication (2FA) is enabled for the API key and action in
    question, the one time password must be specified in the payload's `otp`
    value.



    ## Headers and Signature


    <SecurityDefinitions />


    # Rate Limits


    We have various safeguards in place to protect against system abuse, order
    book manipulation, DDoS attacks, etc. For REST API requests, these are
    broadly organised into rate limits specific to the REST API, and rate limits
    which apply to any trading requests.


    > __Note:__ For clients with performance sensitive applications, we strongly
    recommend the use of our Websockets API for minimising request latency and
    receiving real-time information, reducing or eliminating the need to
    frequently poll REST endpoints.


    ## REST API Rate Limits


    ### Limits


    Every REST API user has a "call counter" which starts at `0`. Ledger/trade
    history calls increase the counter by `2`. All other API calls increase this
    counter by `1` (except AddOrder, CancelOrder which operate on a different
    limiter detailed further below).


    | Tier         | Max API Counter | API Counter Decay |

    | ------------ | --------------- | ----------------- |

    | Starter      | 15              | -0.33/sec         |

    | Intermediate | 20              | -0.5/sec          |

    | Pro          | 20              | -1/sec            |


    The user's counter is reduced every couple of seconds depending on their
    verification tier. Each API key's counter is separate, and if the counter
    exceeds the maximum value, subsequent calls using that API key would be rate
    limited. If the rate limits are reached, additional calls will be restricted
    for a few seconds (or possibly longer if calls continue to be made while the
    rate limits are active).


    ### Errors


    * "EAPI:Rate limit exceeded" if the REST API counter exceeds the user's
    maximum.

    * "EService: Throttled: [UNIX timestamp]" if there are too many concurrent
    requests. Try again after [timestamp].


    Additional information can be found on our [support
    center](https://support.kraken.com/hc/en-us/articles/206548367-What-are-the-API-rate-limits-).


    ## Matching Engine Rate Limits


    ### Limits


    Separate limits apply to the number of orders clients may have open in each
    pair at a time, and the speed with which they may add and cancel orders in
    each pair. These limits vary by the account verification tier: 


    | Tier      | Max Num Orders | Max Ratecount | Ratecount Decay |

    | ----------- | ----------- | ----------- | ----------- |

    | Starter      | 60       | 60 | -1/sec |

    | Intermediate   | 80 | 125 | -2.34/sec |

    | Pro     | 225 | 180 | -3.75/sec |


    ### Penalties


    The speed is controlled by a ratecounter for each (client, pair) which
    starts at zero, is incremented when penalties are applied, and decremented
    according to the decay rates above. A penalty is added to the ratecounter
    for each new order placed (`AddOrder`) or cancelled (`CancelOrder`,
    `CancelAll`, `CancelAllOrdersAfter`) on the pair. The cancellation penalty
    varies according to the lifetime of the order.


    | Action       |    | <5sec  | <10sec | <15sec | <45sec | <90sec | <300s |
    >300s |

    | ------------ | -- | -- | -- | -- | -- | -- | -- | -- |

    | Add Order    | +1 |    |    |    |    |    |    |    |

    | Cancel Order |    | +8 | +6 | +5 | +4 | +2 | +1 | 0 |


    > __Note:__ A client's exact ratecounter values can be monitored via the
    Websockets
    [openOrders](https://docs.kraken.com/websockets/#message-openOrders) feed.


    ### Errors


    * "EOrder:Orders limit exceeded" if the number of open orders in a given
    pair is exceeded

    * "EOrder:Rate limit exceeded" if the user's max ratecount is exceeded for a
    given pair


    Additional information can be found on our [support
    center](https://support.kraken.com/hc/en-us/articles/360045239571).


    # Changelog


    * Dec 2021 - Add REST `AddOrder` support for optional parameter trigger and
    values `last` (last traded price) and `index`.

    * Sep 2021 - Add REST `AddOrder` support for optional parameter `deadline`

    * Sep 2021 - Add REST `AddOrder` support for optional parameter
    `timeinforce` and value `ioc` (Immediate-or-cancel)

    * July 2021 - Allow querying of `WithdrawStatus` with read-only API key
    permission "Query Ledgers".


    **Note:** Most changes affecting our APIs or trading engine behaviour are
    currently being tracked on our
    [Websockets](https://docs.kraken.com/websockets/#changelog) changelog, until
    these documents are combined.


    # Example API Clients


    In order to achieve maximum performance, security and flexibility for your
    particular needs, we strongly encourage the implementation of this API with
    your own code, and to minimise reliance on third party software.


    That being said, in order to aid with rapid development and prototyping,
    we're in the process of producing 'official' API clients in Python and
    Golang that will be actively maintained, coincident with the release of
    newer versions of both our Websockets and REST APIs. In the meantime, our
    Client Engagement team has compiled a number of [code snippets, examples and
    Postman
    collections](https://support.kraken.com/hc/en-us/sections/360003946512-Example-API-Code)
    that many find useful. 


    ### Third Party Software


    Below are other third party API client code libraries that may be used when
    writing your own API client. Please keep in mind that Payward nor the third
    party authors are responsible for losses due to bugs or improper use of the
    APIs. Payward has performed an initial review of the safety of the third
    party code before listing them but cannot vouch for any changes added since
    then, or for those that may be stale. If you have concerns, please contact
    support.


    | Language      | Link |

    | ----------- | ----------- |

    | C++ |
    [https://github.com/voidloop/krakenapi](https://github.com/voidloop/krakenapi)
    |

    | Golang |
    [https://github.com/Beldur/kraken-go-api-client](https://github.com/Beldur/kraken-go-api-client)
    |

    | NodeJS |
    [https://github.com/nothingisdead/npm-kraken-api](https://github.com/nothingisdead/npm-kraken-api)
    |

    | Python 3 |
    [https://github.com/veox/python3-krakenex](https://github.com/veox/python3-krakenex)      
    |

    | Python 2 |
    [https://github.com/veox/python2-krakenex](https://github.com/veox/python2-krakenex)
    |


    Other 
paths:
  /public/Time:
    get:
      tags:
        - Market Data
      summary: Get Server Time
      x-summary: Test123
      description: Get the server's time.
      operationId: getServerTime
      security: []
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                description: Success response
                type: object
                properties:
                  result:
                    title: ServerTime
                    type: object
                    properties:
                      unixtime:
                        description: Unix timestamp
                        type: integer
                      rfc1123:
                        description: RFC 1123 time format
                        type: string
                  error:
                    $ref: '#/components/schemas/ApiError'
  /public/SystemStatus:
    get:
      tags:
        - Market Data
      summary: Get System Status
      description: |
        Get the current system status or trading mode. 
      operationId: getSystemStatus
      security: []
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    properties:
                      status:
                        type: string
                        enum:
                          - online
                          - maintenance
                          - cancel_only
                          - post_only
                        description: >
                          Current system status


                          * `online`  Kraken is operating normally. All order
                          types may be submitted and trades can occur.

                          * `maintenance`  The exchange is offline. No new
                          orders or cancellations may be submitted.

                          * `cancel_only`  Resting (open) orders can be
                          cancelled but no new orders may be submitted. No
                          trades will occur.

                          * `post_only`  Only post-only limit orders can be
                          submitted. Existing orders may still be cancelled. No
                          trades will occur.
                      timestamp:
                        type: string
                        description: Current timestamp (RFC3339)
                  error:
                    $ref: '#/components/schemas/ApiError'
              example:
                error: []
                result:
                  status: online
                  timestamp: '2021-03-21T15:33:02Z'
      x-codeSamples:
        - lang: cURL
          source: curl "https://api.kraken.com/0/public/SystemStatus"
        - lang: Python
          source: |
            import requests

            resp = requests.get('https://api.kraken.com/0/public/SystemStatus')

            print(resp.json())
  /public/Assets:
    get:
      tags:
        - Market Data
      summary: Get Asset Info
      description: >-
        Get information about the assets that are available for deposit,
        withdrawal, trading and staking.
      operationId: getAssetInfo
      security: []
      parameters:
        - in: query
          name: asset
          schema:
            type: string
          description: Comma delimited list of assets to get info on.
          example: XBT,ETH
        - in: query
          name: aclass
          schema:
            type: string
          description: 'Asset class.  (optional, default: `currency`)'
          example: currency
      responses:
        '200':
          description: Asset info retrieved.
          content:
            application/json:
              schema:
                example:
                  error: []
                  result:
                    XXBT:
                      aclass: currency
                      altname: XBT
                      decimals: 10
                      display_decimals: 5
                    ZEUR:
                      aclass: currency
                      altname: EUR
                      decimals: 4
                      display_decimals: 2
                    ZUSD:
                      aclass: currency
                      altname: USD
                      decimals: 4
                      display_decimals: 2
                type: object
                properties:
                  result:
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: asset
                      title: AssetInfo
                      description: Asset Info
                      type: object
                      properties:
                        aclass:
                          description: Asset Class
                          type: string
                        altname:
                          description: Alternate name
                          type: string
                        decimals:
                          description: Scaling decimal places for record keeping
                          type: integer
                        display_decimals:
                          description: Scaling decimal places for output display
                          type: integer
                  error:
                    $ref: '#/components/schemas/ApiError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl "https://api.kraken.com/0/public/Assets"
        - lang: Python
          source: |
            import requests

            resp = requests.get('https://api.kraken.com/0/public/Assets')

            print(resp.json())
  /public/AssetPairs:
    get:
      tags:
        - Market Data
      summary: Get Tradable Asset Pairs
      description: Get tradable asset pairs
      operationId: getTradableAssetPairs
      security: []
      parameters:
        - in: query
          name: pair
          description: Asset pairs to get data for
          schema:
            type: string
          example: XXBTCZUSD,XETHXXBT
        - in: query
          name: info
          schema:
            type: string
            enum:
              - info
              - leverage
              - fees
              - margin
            default: info
          description: |
            Info to retrieve.  (optional)

              * `info` = all info
              * `leverage` = leverage info
              * `fees` = fees schedule
              * `margin` = margin info
      responses:
        '200':
          description: Tradable asset pairs retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    description: Pair names and their info
                    type: object
                    additionalProperties:
                      title: AssetPair
                      description: Trading Asset Pair
                      type: object
                      x-additionalPropertiesName: pair
                      properties:
                        altname:
                          description: Alternate pair name
                          type: string
                        wsname:
                          description: WebSocket pair name (if available)
                          type: string
                        aclass_base:
                          description: Asset class of base component
                          type: string
                        base:
                          description: Asset ID of base component
                          type: string
                        aclass_quote:
                          description: Asset class of quote component
                          type: string
                        quote:
                          description: Asset ID of quote component
                          type: string
                        lot:
                          description: Volume lot size
                          type: string
                          deprecated: true
                        pair_decimals:
                          description: Scaling decimal places for pair
                          type: integer
                        lot_decimals:
                          description: Scaling decimal places for volume
                          type: integer
                        lot_multiplier:
                          description: >-
                            Amount to multiply lot volume by to get currency
                            volume
                          type: integer
                        leverage_buy:
                          description: Array of leverage amounts available when buying
                          type: array
                          items:
                            type: integer
                        leverage_sell:
                          description: Array of leverage amounts available when selling
                          type: array
                          items:
                            type: integer
                        fees:
                          description: >-
                            Fee schedule array in `[<volume>, <percent fee>]`
                            tuples
                          type: array
                          items:
                            type: array
                            items:
                              oneOf:
                                - type: integer
                                - type: number
                        fees_maker:
                          description: >-
                            Maker fee schedule array in `[<volume>, <percent
                            fee>]`  tuples (if on maker/taker)
                          type: array
                          items:
                            type: array
                            items:
                              oneOf:
                                - type: integer
                                - type: number
                        fee_volume_currency:
                          description: Volume discount currency
                          type: string
                        margin_call:
                          description: Margin call level
                          type: integer
                        margin_stop:
                          description: Stop-out/liquidation margin level
                          type: integer
                        ordermin:
                          description: Minimum order size (in terms of base currency)
                          type: string
                  error:
                    $ref: '#/components/schemas/ApiError'
                example:
                  error: []
                  result:
                    XETHXXBT:
                      altname: ETHXBT
                      wsname: ETH/XBT
                      aclass_base: currency
                      base: XETH
                      aclass_quote: currency
                      quote: XXBT
                      lot: unit
                      pair_decimals: 5
                      lot_decimals: 8
                      lot_multiplier: 1
                      leverage_buy:
                        - 2
                        - 3
                        - 4
                        - 5
                      leverage_sell:
                        - 2
                        - 3
                        - 4
                        - 5
                      fees:
                        - - 0
                          - 0.26
                        - - 50000
                          - 0.24
                        - - 100000
                          - 0.22
                        - - 250000
                          - 0.2
                        - - 500000
                          - 0.18
                        - - 1000000
                          - 0.16
                        - - 2500000
                          - 0.14
                        - - 5000000
                          - 0.12
                        - - 10000000
                          - 0.1
                      fees_maker:
                        - - 0
                          - 0.16
                        - - 50000
                          - 0.14
                        - - 100000
                          - 0.12
                        - - 250000
                          - 0.1
                        - - 500000
                          - 0.08
                        - - 1000000
                          - 0.06
                        - - 2500000
                          - 0.04
                        - - 5000000
                          - 0.02
                        - - 10000000
                          - 0
                      fee_volume_currency: ZUSD
                      margin_call: 80
                      margin_stop: 40
                      ordermin: '0.005'
                    XXBTZUSD:
                      altname: XBTUSD
                      wsname: XBT/USD
                      aclass_base: currency
                      base: XXBT
                      aclass_quote: currency
                      quote: ZUSD
                      lot: unit
                      pair_decimals: 1
                      lot_decimals: 8
                      lot_multiplier: 1
                      leverage_buy:
                        - 2
                        - 3
                        - 4
                        - 5
                      leverage_sell:
                        - 2
                        - 3
                        - 4
                        - 5
                      fees:
                        - - 0
                          - 0.26
                        - - 50000
                          - 0.24
                        - - 100000
                          - 0.22
                        - - 250000
                          - 0.2
                        - - 500000
                          - 0.18
                        - - 1000000
                          - 0.16
                        - - 2500000
                          - 0.14
                        - - 5000000
                          - 0.12
                        - - 10000000
                          - 0.1
                      fees_maker:
                        - - 0
                          - 0.16
                        - - 50000
                          - 0.14
                        - - 100000
                          - 0.12
                        - - 250000
                          - 0.1
                        - - 500000
                          - 0.08
                        - - 1000000
                          - 0.06
                        - - 2500000
                          - 0.04
                        - - 5000000
                          - 0.02
                        - - 10000000
                          - 0
                      fee_volume_currency: ZUSD
                      margin_call: 80
                      margin_stop: 40
                      ordermin: '0.0002'
      x-codeSamples:
        - lang: cURL
          source: >
            curl
            "https://api.kraken.com/0/public/AssetPairs?pair=XXBTZUSD,XETHXXBT"
        - lang: Python
          source: >
            import requests


            resp =
            requests.get('https://api.kraken.com/0/public/AssetPairs?pair=XXBTZUSD,XETHXXBT')


            print(resp.json())
  /public/Ticker:
    get:
      summary: Get Ticker Information
      description: 'Note: Today''s prices start at midnight UTC'
      tags:
        - Market Data
      operationId: getTickerInformation
      security: []
      parameters:
        - $ref: '#/components/parameters/AssetPair'
      responses:
        '200':
          description: Ticker info retrieved.
          content:
            application/json:
              schema:
                example:
                  error: []
                  result:
                    XXBTZUSD:
                      a:
                        - '52609.60000'
                        - '1'
                        - '1.000'
                      b:
                        - '52609.50000'
                        - '1'
                        - '1.000'
                      c:
                        - '52641.10000'
                        - '0.00080000'
                      v:
                        - '1920.83610601'
                        - '7954.00219674'
                      p:
                        - '52389.94668'
                        - '54022.90683'
                      t:
                        - 23329
                        - 80463
                      l:
                        - '51513.90000'
                        - '51513.90000'
                      h:
                        - '53219.90000'
                        - '57200.00000'
                      o: '52280.40000'
                type: object
                properties:
                  result:
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: pair
                      title: AssetTickerInfo
                      description: Asset Ticker Info
                      type: object
                      properties:
                        a:
                          description: Ask `[<price>, <whole lot volume>, <lot volume>]`
                          type: array
                          items:
                            type: string
                        b:
                          description: Bid `[<price>, <whole lot volume>, <lot volume>]`
                          type: array
                          items:
                            type: string
                        c:
                          description: Last trade closed `[<price>, <lot volume>]`
                          type: array
                          items:
                            type: string
                        v:
                          description: Volume `[<today>, <last 24 hours>]`
                          type: array
                          items:
                            type: string
                        p:
                          description: >-
                            Volume weighted average price `[<today>, <last 24
                            hours>]`
                          type: array
                          items:
                            type: string
                        t:
                          description: Number of trades `[<today>, <last 24 hours>]`
                          type: array
                          items:
                            type: integer
                        l:
                          description: Low `[<today>, <last 24 hours>]`
                          type: array
                          items:
                            type: string
                        h:
                          description: High `[<today>, <last 24 hours>]`
                          type: array
                          items:
                            type: string
                        o:
                          description: Today's opening price
                          type: string
                  error:
                    $ref: '#/components/schemas/ApiError'
  /public/OHLC:
    get:
      summary: Get OHLC Data
      description: >-
        Note: the last entry in the OHLC array is for the current,
        not-yet-committed frame and will always be present, regardless of the
        value of `since`.
      tags:
        - Market Data
      operationId: getOHLCData
      security: []
      parameters:
        - $ref: '#/components/parameters/AssetPair'
        - $ref: '#/components/parameters/BarInterval'
        - name: since
          in: query
          description: Return committed OHLC data since given ID
          schema:
            type: integer
      responses:
        '200':
          description: OHLC data retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: pair
                      title: TickData
                      description: >
                        Array of tick data arrays

                        `[int <time>, string <open>, string <high>, string
                        <low>, string <close>, string <vwap>, string <volume>,
                        int <count>]`
                      type: array
                      items:
                        type: array
                        items:
                          minItems: 8
                          maxItems: 8
                          oneOf:
                            - type: string
                            - type: integer
                    properties:
                      last:
                        type: integer
                        description: >-
                          ID to be used as since when polling for new, committed
                          OHLC data
                  error:
                    $ref: '#/components/schemas/ApiError'
  /public/Depth:
    get:
      summary: Get Order Book
      tags:
        - Market Data
      operationId: getOrderBook
      security: []
      parameters:
        - $ref: '#/components/parameters/AssetPair'
        - name: count
          description: Depth of book
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 100
      responses:
        '200':
          description: Order book entries retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: pair
                      title: OrderBook
                      description: Asset Pair Order Book Entries
                      type: object
                      properties:
                        asks:
                          description: >-
                            Ask side array of entries `[<price>, <volume>,
                            <timestamp>]`
                          type: array
                          items:
                            oneOf:
                              - type: string
                              - type: integer
                            example:
                              - '3539.90000'
                              - '0.801'
                              - 1548119951
                        bid:
                          description: >-
                            Bid side array of entries `[<price>, <volume>,
                            <timestamp>]`
                          type: array
                          items:
                            oneOf:
                              - type: string
                              - type: integer
                  error:
                    $ref: '#/components/schemas/ApiError'
  /public/Trades:
    get:
      summary: Get Recent Trades
      description: Returns the last 1000 trades by default
      tags:
        - Market Data
      operationId: getRecentTrades
      security: []
      parameters:
        - $ref: '#/components/parameters/AssetPair'
        - name: since
          in: query
          description: Return trade data since given timestamp
          schema:
            type: string
      responses:
        '200':
          description: Trade data retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: pair
                      title: TickData
                      description: >
                        Array of trade entries

                        `[<price>, <volume>, <time>, <buy/sell>, <market/limit>,
                        <miscellaneous>]`
                      type: array
                      items:
                        oneOf:
                          - type: string
                          - type: number
                    properties:
                      last:
                        type: string
                        description: ID to be used as since when polling for new trade data
                  error:
                    $ref: '#/components/schemas/ApiError'
  /public/Spread:
    get:
      summary: Get Recent Spreads
      tags:
        - Market Data
      operationId: getRecentSpreads
      security: []
      parameters:
        - $ref: '#/components/parameters/AssetPair'
        - name: since
          in: query
          description: Return spread data since given ID
          schema:
            type: integer
          example: 1548122302
      responses:
        '200':
          description: Spread data retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: pair
                      title: SpreadData
                      description: |
                        Array of spread entries
                        `[int <time>, string <bid>, string <ask>]`
                      type: array
                      items:
                        oneOf:
                          - type: string
                          - type: integer
                        example:
                          - 1548120550
                          - '3538.70000'
                          - '3541.50000'
                    properties:
                      last:
                        type: integer
                        description: >-
                          ID to be used as since when polling for new spread
                          data
                  error:
                    $ref: '#/components/schemas/ApiError'
              example:
                error: []
                result:
                  XXBTZUSD:
                    - - 1548120550
                      - '3538.70000'
                      - '3541.50000'
                    - - 1548120551
                      - '3538.80000'
                      - '3541.50000'
                    - - 1548120554
                      - '3538.80000'
                      - '3541.40000'
                  last: 1548122302
      x-codeSamples:
        - lang: cURL
          source: |
            curl "https://api.kraken.com/0/public/Spread?pair=XBTUSD"
        - lang: Python
          source: >
            import requests


            resp =
            requests.get('https://api.kraken.com/0/public/Spread?pair=XBTUSD')


            print(resp.json())
  /private/GetWebSocketsToken:
    post:
      summary: Get Websockets Token
      description: >
        An authentication token must be requested via this REST API endpoint in
        order to connect to and authenticate with our [Websockets
        API](https://docs.kraken.com). The token should be used within 15
        minutes of creation, but it does not expire once a successful Websockets
        connection and private subscription has been made and is maintained.


        > The 'Access WebSockets API' permission must be enabled for the API key
        in order to generate the authentication token.
      tags:
        - Websockets Authentication
      operationId: getWebsocketsToken
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
      x-codeSamples:
        - lang: cURL
          source: >
            curl -X "POST" "http://api.kraken.com/0/private/GetWebSocketsToken"
            \
                -H 'API-Key: <YOUR-API-KEY>' \
                -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \
                -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \
                --data-urlencode "nonce=<YOUR-NONCE>" 
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            resp = kraken_request('/0/private/GetWebSocketsToken', {
                "nonce": str(int(1000*time.time()))
            }, api_key, api_sec)

            print(resp.json())
      responses:
        '200':
          description: Websockets token retrieved.
          content:
            application/json:
              example:
                error: []
                result:
                  token: 1Dwc4lzSwNWOAwkMdqhssNNFhs1ed606d1WcF3XfEMw
                  expires: 900
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      token:
                        description: Websockets token
                        type: string
                      expires:
                        description: Time (in seconds) after which the token expires
                        type: integer
                  error:
                    $ref: '#/components/schemas/ApiError'
  /private/Balance:
    post:
      summary: Get Account Balance
      description: |
        Retrieve all cash balances, net of pending withdrawals.
      tags:
        - User Data
      operationId: getAccountBalance
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
      responses:
        '200':
          description: Account balances retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/AccountBalance'
                  error:
                    $ref: '#/components/schemas/ApiError'
  /private/TradeBalance:
    post:
      summary: Get Trade Balance
      description: >
        Retrieve a summary of collateral balances, margin position valuations,
        equity and margin level.
      tags:
        - User Data
      operationId: getTradeBalance
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Update Account Profile Request
              description: Update Account Profile Request Body
              required:
                - nonce
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                asset:
                  description: Base asset to determine balance
                  type: string
                  default: "ZUSD"
      responses:
        '200':
          description: Trade balances retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/TradeBalance'
                  error:
                    $ref: '#/components/schemas/ApiError'
  /private/OpenOrders:
    post:
      summary: Get Open Orders
      description: |
        Retrieve information about currently open orders.
      tags:
        - User Data
      operationId: getOpenOrders
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Get Open Orders Request Body
              required:
                - nonce
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                trades:
                  description: >-
                    Whether or not to include trades related to position in
                    output
                  type: boolean
                  default: false
                userref:
                  description: Restrict results to given user reference id
                  type: integer
                  format: int32
      responses:
        '200':
          description: Open orders info retrieved.
          content:
            application/json:
              schema:
                example:
                  error: []
                  result:
                    open:
                      OQCLML-BW3P3-BUCMWZ:
                        refid: null
                        userref: 0
                        status: open
                        opentm: 1616666559.8974
                        starttm: 0
                        expiretm: 0
                        descr:
                          pair: XBTUSD
                          type: buy
                          ordertype: limit
                          price: '30010.0'
                          price2: '0'
                          leverage: none
                          order: buy 1.25000000 XBTUSD @ limit 30010.0
                          close: ''
                        vol: '1.25000000'
                        vol_exec: '0.37500000'
                        cost: '11253.7'
                        fee: '0.00000'
                        price: '30010.0'
                        stopprice: '0.00000'
                        limitprice: '0.00000'
                        misc: ''
                        oflags: fciq
                        trades:
                          - TCCCTY-WE2O6-P3NB37
                      OB5VMB-B4U2U-DK2WRW:
                        refid: null
                        userref: 120
                        status: open
                        opentm: 1616665899.5699
                        starttm: 0
                        expiretm: 0
                        descr:
                          pair: XBTUSD
                          type: buy
                          ordertype: limit
                          price: '14500.0'
                          price2: '0'
                          leverage: '5:1'
                          order: >-
                            buy 0.27500000 XBTUSD @ limit 14500.0 with 5:1
                            leverage
                          close: ''
                        vol: '0.27500000'
                        vol_exec: '0.00000000'
                        cost: '0.00000'
                        fee: '0.00000'
                        price: '0.00000'
                        stopprice: '0.00000'
                        limitprice: '0.00000'
                        misc: ''
                        oflags: fciq
                      OXHXGL-F5ICS-6DIC67:
                        refid: null
                        userref: 120
                        status: open
                        opentm: 1616665894.0036
                        starttm: 0
                        expiretm: 0
                        descr:
                          pair: XBTUSD
                          type: buy
                          ordertype: limit
                          price: '17500.0'
                          price2: '0'
                          leverage: '5:1'
                          order: >-
                            buy 0.27500000 XBTUSD @ limit 17500.0 with 5:1
                            leverage
                          close: ''
                        vol: '0.27500000'
                        vol_exec: '0.00000000'
                        cost: '0.00000'
                        fee: '0.00000'
                        price: '0.00000'
                        stopprice: '0.00000'
                        limitprice: '0.00000'
                        misc: ''
                        oflags: fciq
                      OLQCVY-B27XU-MBPCL5:
                        refid: null
                        userref: 251
                        status: open
                        opentm: 1616665556.7646
                        starttm: 0
                        expiretm: 0
                        descr:
                          pair: XBTUSD
                          type: buy
                          ordertype: limit
                          price: '23500.0'
                          price2: '0'
                          leverage: none
                          order: buy 0.27500000 XBTUSD @ limit 23500.0
                          close: ''
                        vol: '0.27500000'
                        vol_exec: '0.00000000'
                        cost: '0.00000'
                        fee: '0.00000'
                        price: '0.00000'
                        stopprice: '0.00000'
                        limitprice: '0.00000'
                        misc: ''
                        oflags: fciq
                      OQCGAF-YRMIQ-AMJTNJ:
                        refid: null
                        userref: 0
                        status: open
                        opentm: 1616665511.0373
                        starttm: 0
                        expiretm: 0
                        descr:
                          pair: XBTUSD
                          type: buy
                          ordertype: stop-loss-limit
                          price: '24500.0'
                          price2: '0'
                          leverage: none
                          order: buy 1.25000000 XBTUSD @ limit 24500.0
                          close: ''
                        vol: '1.25000000'
                        vol_exec: '0.00000000'
                        cost: '0.00000'
                        fee: '0.00000'
                        price: '0.00000'
                        stopprice: '0.00000'
                        limitprice: '0.00000'
                        misc: ''
                        oflags: fciq
                        trigger: index
                type: object
                properties:
                  result:
                    title: OpenOrders
                    description: Open Orders
                    type: object
                    properties:
                      open:
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: txid
                          allOf:
                            - $ref: '#/components/schemas/OpenOrder'
                  error:
                    $ref: '#/components/schemas/ApiError'
  /private/ClosedOrders:
    post:
      summary: Get Closed Orders
      description: >
        Retrieve information about orders that have been closed (filled or
        cancelled). 50 results are returned at a time, the most recent by
        default.


        **Note:** If an order's tx ID is given for `start` or `end` time, the
        order's opening time (`opentm`) is used
      tags:
        - User Data
      operationId: getClosedOrders
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Get Closed Orders Request Body
              required:
                - nonce
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                trades:
                  description: >-
                    Whether or not to include trades related to position in
                    output
                  type: boolean
                  default: false
                userref:
                  description: Restrict results to given user reference id
                  type: integer
                  format: int32
                start:
                  description: >-
                    Starting unix timestamp or order tx ID of results
                    (exclusive)
                  type: integer
                end:
                  description: Ending unix timestamp or order tx ID of results (inclusive)
                  type: integer
                ofs:
                  description: Result offset for pagination
                  type: integer
                closetime:
                  description: Which time to use to search
                  type: string
                  enum:
                    - open
                    - close
                    - both
                  default: both
      responses:
        '200':
          description: Closed orders info retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    title: ClosedOrders
                    description: Closed Orders
                    type: object
                    properties:
                      closed:
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: txid
                          allOf:
                            - $ref: '#/components/schemas/OpenOrder'
                      count:
                        description: Amount of available order info matching criteria
                        type: integer
                  error:
                    $ref: '#/components/schemas/ApiError'
  /private/QueryOrders:
    post:
      summary: Query Orders Info
      description: |
        Retrieve information about specific orders.
      tags:
        - User Data
      operationId: getOrdersInfo
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Query Orders Info Request Body
              required:
                - nonce
                - txid
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                trades:
                  description: >-
                    Whether or not to include trades related to position in
                    output
                  type: boolean
                  default: false
                userref:
                  description: Restrict results to given user reference id
                  type: integer
                  format: int32
                txid:
                  description: >-
                    Comma delimited list of transaction IDs to query info about
                    (50 maximum)
                  type: string
      responses:
        '200':
          description: Orders info retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: txid
                      oneOf:
                        - title: OpenOrder
                          description: Open Order
                          allOf:
                            - $ref: '#/components/schemas/OpenOrder'
                        - title: ClosedOrder
                          description: Closed Order
                          allOf:
                            - $ref: '#/components/schemas/ClosedOrder'
                  error:
                    $ref: '#/components/schemas/ApiError'
  /private/TradesHistory:
    post:
      summary: Get Trades History
      description: >
        Retrieve information about trades/fills. 50 results are returned at a
        time, the most recent by default.

        * Unless otherwise stated, costs, fees, prices, and volumes are
        specified with the precision for the asset pair (`pair_decimals` and
        `lot_decimals`), not the individual assets' precision (`decimals`).
      tags:
        - User Data
      operationId: getTradeHistory
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Get Trades History Request Body
              required:
                - nonce
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                type:
                  description: Type of trade
                  type: string
                  default: all
                  enum:
                    - all
                    - any position
                    - closed position
                    - closing position
                    - no position
                trades:
                  description: >-
                    Whether or not to include trades related to position in
                    output
                  type: boolean
                  default: false
                start:
                  description: >-
                    Starting unix timestamp or trade tx ID of results
                    (exclusive)
                  type: integer
                end:
                  description: Ending unix timestamp or trade tx ID of results (inclusive)
                  type: integer
                ofs:
                  description: Result offset for pagination
                  type: integer
      responses:
        '200':
          description: Trade history retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    title: TradeHistory
                    description: Trade History
                    type: object
                    properties:
                      trades:
                        description: Trade info
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: txid
                          allOf:
                            - $ref: '#/components/schemas/Trade'
                      count:
                        description: Amount of available trades matching criteria
                        type: integer
                  error:
                    $ref: '#/components/schemas/ApiError'
  /private/QueryTrades:
    post:
      summary: Query Trades Info
      description: |
        Retrieve information about specific trades/fills.
      tags:
        - User Data
      operationId: getTradesInfo
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Get Trades Info Request Body
              required:
                - nonce
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                txid:
                  description: >-
                    Comma delimited list of transaction IDs to query info about
                    (20 maximum)
                  type: string
                trades:
                  description: >-
                    Whether or not to include trades related to position in
                    output
                  type: boolean
                  default: false
      responses:
        '200':
          description: Trades info retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    description: Trade info
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: txid
                      allOf:
                        - $ref: '#/components/schemas/Trade'
                  error:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiError'
  /private/OpenPositions:
    post:
      summary: Get Open Positions
      description: Get information about open margin positions.
      tags:
        - User Data
      operationId: getOpenPositions
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                txid:
                  type: string
                  description: Comma delimited list of txids to limit output to
                docalcs:
                  type: boolean
                  description: Whether to include P&L calculations
                  default: false
                consolidation:
                  type: string
                  description: Consolidate positions by market/pair
                  enum:
                    - market
      responses:
        '200':
          description: Open positions info retrieved.
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: txid

                      properties:
                        ordertxid:
                          type: string
                          description: Order ID responsible for the position
                        posstatus:
                          type: string
                          description: Position status
                          enum:
                            - open
                        pair:
                          type: string
                          description: Asset pair
                        time:
                          type: number
                          description: Unix timestamp of trade
                        type:
                          type: string
                          description: Direction (buy/sell) of position
                        ordertype:
                          type: string
                          description: Order type used to open position
                        cost:
                          type: string
                          description: Opening cost of position (in quote currency)
                        fee:
                          type: string
                          description: Opening fee of position (in quote currency)
                        vol:
                          type: string
                          description: Position opening size (in base currency)
                        vol_closed:
                          type: string
                          description: Quantity closed (in base currency)
                        margin:
                          type: string
                          description: Initial margin consumed (in quote currency)
                        value:
                          type: string
                          description: >-
                            Current value of remaining position (if `docalcs`
                            requested)
                        net:
                          type: string
                          description: >-
                            Unrealised P&L of remaining position (if `docalcs`
                            requested)
                        terms:
                          type: string
                          description: Funding cost and term of position
                        rollovertm:
                          type: string
                          description: Timestamp of next margin rollover fee
                        misc:
                          type: string
                          description: Comma delimited list of add'l info
                        oflags:
                          type: string
                          description: Comma delimited list of opening order flags
                  error:
                    $ref: '#/components/schemas/ApiError'
  /private/Ledgers:
    post:
      summary: Get Ledgers Info
      description: >
        Retrieve information about ledger entries. 50 results are returned at a
        time, the most recent by default.
      tags:
        - User Data
      operationId: getLedgers
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Get Ledgers Info Request Body
              required:
                - nonce
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                asset:
                  description: Comma delimited list of assets to restrict output to
                  type: string
                  default: all
                aclass:
                  description: Asset class
                  type: string
                  default: currency
                type:
                  description: Type of ledger to retrieve
                  type: string
                  default: all
                  enum:
                    - all
                    - deposit
                    - withdrawal
                    - trade
                    - margin
                start:
                  description: Starting unix timestamp or ledger ID of results (exclusive)
                  type: integer
                end:
                  description: Ending unix timestamp or ledger ID of results (inclusive)
                  type: integer
                ofs:
                  description: Result offset for pagination
                  type: integer
      responses:
        '200':
          description: Ledgers info retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    title: LedgersInfo
                    description: Ledgers Info
                    type: object
                    properties:
                      ledger:
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: ledger_id
                          allOf:
                            - $ref: '#/components/schemas/LedgerEntry'
                      count:
                        description: Amount of available ledger info matching criteria
                        type: integer
                  error:
                    $ref: '#/components/schemas/ApiError'
  /private/QueryLedgers:
    post:
      summary: Query Ledgers
      description: |
        Retrieve information about specific ledger entries. 
      tags:
        - User Data
      operationId: getLedgersInfo
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Get Ledger Info Request Body
              required:
                - nonce
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                id:
                  description: >-
                    Comma delimited list of ledger IDs to query info about (20
                    maximum)
                  type: string
                trades:
                  description: >-
                    Whether or not to include trades related to position in
                    output
                  type: boolean
                  default: false
      responses:
        '200':
          description: Ledgers info retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: ledger_id
                      allOf:
                        - $ref: '#/components/schemas/LedgerEntry'
                      title: LedgerEntry
                      description: Ledger Entry
                      type: object
                      properties:
                        refid:
                          description: Reference Id
                          type: string
                        time:
                          description: Unix timestamp of ledger
                          type: number
                        type:
                          description: Type of ledger entry
                          type: string
                          enum:
                            - trade
                            - deposit
                            - withdraw
                            - transfer
                            - margin
                            - rollover
                            - spend
                            - receive
                            - settled
                            - adjustment
                        subtype:
                          description: >-
                            Additional info relating to the ledger entry type,
                            where applicable
                          type: string
                        aclass:
                          description: Asset class
                          type: string
                        asset:
                          description: Asset
                          type: string
                        amount:
                          description: Transaction amount
                          type: string
                        fee:
                          description: Transaction fee
                          type: string
                        balance:
                          description: Resulting balance
                          type: string
                  error:
                    $ref: '#/components/schemas/ApiError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl -X "POST" "https://api.kraken.com/0/private/QueryLedgers" \
                 -H 'API-Key: <YOUR-API-KEY>' \
                 -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \
                 -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \
                 --data-urlencode "nonce=<YOUR-NONCE>&id=LGBRJU-SQZ4L-5HLS3C,L3S26P-BHIOV-TTWYYI"
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/QueryLedgers', {
                "nonce": str(int(1000*time.time())),
                "id": "L4UESK-KG3EQ-UFO4T5"
            }, api_key, api_sec)

            print(resp.json())
  /private/TradeVolume:
    post:
      summary: Get Trade Volume
      description: >
        Note: If an asset pair is on a maker/taker fee schedule, the taker side
        is given in `fees` and maker side in `fees_maker`. For pairs not on
        maker/taker, they will only be given in `fees`.
      tags:
        - User Data
      operationId: getTradeVolume
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Get Trade Volume
              required:
                - nonce
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                pair:
                  description: >-
                    Comma delimited list of asset pairs to get fee info on
                    (optional)
                  type: string
                fee-info:
                  description: Whether or not to include fee info in results (optional)
                  type: boolean
      parameters:
        - $ref: '#/components/parameters/AssetPair'
      responses:
        '200':
          description: Trade Volume retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    title: TradeVolume
                    description: Trade Volume
                    type: object
                    properties:
                      currency:
                        description: Volume currency
                        type: string
                      volume:
                        description: Current discount volume
                        type: string
                      fees:
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: pair
                          title: FeeTierInfo
                          description: Fee Tier Info
                          type: object
                          properties:
                            fee:
                              description: Current fee (in percent)
                              type: string
                            min_fee:
                              description: minimum fee for pair (if not fixed fee)
                              type: string
                            max_fee:
                              description: maximum fee for pair (if not fixed fee)
                              type: string
                            next_fee:
                              description: >-
                                next tier's fee for pair (if not fixed fee, 
                                null if at lowest fee tier)
                              type: string
                              nullable: true
                            tier_volume:
                              description: >-
                                volume level of current tier (if not fixed fee.
                                null if at lowest fee tier)
                              type: string
                              nullable: true
                            next_volume:
                              description: >-
                                volume level of next tier (if not fixed fee.
                                null if at lowest fee tier)
                              type: string
                              nullable: true
                      fees_maker:
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: pair
                          allOf:
                            - $ref: '#/components/schemas/TradeVolume'
                  error:
                    $ref: '#/components/schemas/ApiError'
  /private/AddExport:
    post:
      summary: Request Export Report
      description: Request export of trades or ledgers.
      tags:
        - User Data
      operationId: addExport
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
                - report
                - description
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                report:
                  type: string
                  description: Type of data to export
                  enum:
                    - trades
                    - ledgers
                format:
                  type: string
                  description: File format to export
                  enum:
                    - CSV
                    - TSV
                  default: CSV
                description:
                  type: string
                  description: Description for the export
                fields:
                  type: string
                  default: all
                  description: >
                    Comma-delimited list of fields to include


                    * `trades`: ordertxid, time, ordertype, price, cost, fee,
                    vol, margin, misc, ledgers

                    * `ledgers`: refid, time, type, aclass, asset, amount, fee,
                    balance
                starttm:
                  type: integer
                  description: >-
                    UNIX timestamp for report start time (default 1st of the
                    current month)
                endtm:
                  type: integer
                  description: UNIX timestamp for report end time (default now)
      responses:
        '200':
          description: Export request made
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Report ID
                  error:
                    $ref: '#/components/schemas/ApiError'
              example:
                error: []
                result:
                  id: TCJA
      x-codeSamples:
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/AddExport', {
                "nonce": str(int(1000*time.time())),
                "description":"my_trades_1",
                "format":"CSV",
                "report":"trades"
            }, api_key, api_sec)

            print(resp.json())
  /private/ExportStatus:
    post:
      summary: Get Export Report Status
      description: Get status of requested data exports.
      tags:
        - User Data
      operationId: exportStatus
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
                - report
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                report:
                  type: string
                  description: Type of reports to inquire about
                  enum:
                    - trades
                    - ledgers
      responses:
        '200':
          description: Export status retrieved
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Report ID
                        descr:
                          type: string
                        format:
                          type: string
                        report:
                          type: string
                        subtype:
                          type: string
                        status:
                          type: string
                          description: Status of the report
                          enum:
                            - Queued
                            - Processing
                            - Processed
                        flags:
                          type: string
                          deprecated: true
                        fields:
                          type: string
                        createdtm:
                          type: string
                          description: UNIX timestamp of report request
                        expiretm:
                          type: string
                          deprecated: true
                        starttm:
                          type: string
                          description: UNIX timestamp report processing began
                        completedtm:
                          type: string
                          description: UNIX timestamp report processing finished
                        datastarttm:
                          type: string
                          description: UNIX timestamp of the report data start time
                        dataendtm:
                          type: string
                          description: UNIX timestamp of the report data end time
                        aclass:
                          type: string
                          deprecated: true
                        asset:
                          type: string
                  error:
                    $ref: '#/components/schemas/ApiError'
              example:
                error: []
                result:
                  - id: VSKC
                    descr: my_trades_1
                    format: CSV
                    report: trades
                    subtype: all
                    status: Processed
                    flags: '0'
                    fields: all
                    createdtm: '1616669085'
                    expiretm: '1617878685'
                    starttm: '1616669093'
                    completedtm: '1616669093'
                    datastarttm: '1614556800'
                    dataendtm: '1616669085'
                    aclass: forex
                    asset: all
                  - id: TCJA
                    descr: my_trades_1
                    format: CSV
                    report: trades
                    subtype: all
                    status: Processed
                    flags: '0'
                    fields: all
                    createdtm: '1617363637'
                    expiretm: '1618573237'
                    starttm: '1617363664'
                    completedtm: '1617363664'
                    datastarttm: '1617235200'
                    dataendtm: '1617363637'
                    aclass: forex
                    asset: all
      x-codeSamples:
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/ExportStatus', {
                "nonce": str(int(1000*time.time())),
                "report":"trades"
            }, api_key, api_sec)

            print(resp.json())
  /private/RetrieveExport:
    post:
      summary: Retrieve Data Export
      description: Retrieve a processed data export
      tags:
        - User Data
      operationId: retrieveExport
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
                - id
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                id:
                  type: string
                  description: Report ID to retrieve
      responses:
        '200':
          description: Data export report retrieved
          content:
            application/octet-stream:
              schema:
                properties:
                  report:
                    type: string
                    format: binary
                    description: Binary zip archive containing the report
      x-codeSamples:
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/RetrieveExport', {
                "nonce": str(int(1000*time.time())),
                "id":"TCJA"
            }, api_key, api_sec)

            # Write export to a new file 'myexport.zip'
            target_path = 'myexport.zip'
            handle = open(target_path, "wb")
            for chunk in resp.iter_content(chunk_size=512):
                if chunk:  # filter out keep-alive new chunks
                    handle.write(chunk)
            handle.close()
  /private/RemoveExport:
    post:
      summary: Delete Export Report
      description: Delete exported trades/ledgers report
      tags:
        - User Data
      operationId: removeExport
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
                - id
                - type
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                id:
                  type: string
                  description: ID of report to delete or cancel
                type:
                  type: string
                  description: >
                    `delete` can only be used for reports that have already been
                    processed. Use `cancel` for queued or processing reports.
                  enum:
                    - cancel
                    - delete
      responses:
        '200':
          description: Export report deleted or cancelled
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: object
                    properties:
                      delete:
                        type: boolean
                        description: Whether deletion was successful
                      cancel:
                        type: boolean
                        description: Whether cancellation was successful
                  error:
                    $ref: '#/components/schemas/ApiError'
                example:
                  error: []
                  result:
                    delete: true
      x-codeSamples:
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/RemoveExport', {
                "nonce": str(int(1000*time.time())),
                "id":"TCJA",
                "type":"delete"
            }, api_key, api_sec)

            print(resp.json())
  /private/AddOrder:
    post:
      summary: Add Order
      description: >
        Place a new order.


        **Note**: See the [AssetPairs](#operation/getTradableAssetPairs)
        endpoint for details on the available trading pairs, their price and
        quantity precisions, order minimums, available leverage, etc.
      tags:
        - User Trading
      operationId: addOrder
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Add Standard Order Request Body
              required:
                - nonce
                - pair
                - type
                - ordertype
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                userref:
                  description: >
                    User reference id


                    `userref` is an optional user-specified integer id that can
                    be associated with any number of orders. Many clients choose
                    a `userref` corresponding to a unique integer id generated
                    by their systems (e.g. a timestamp). However, because we
                    don't enforce uniqueness on our side, it can also be used to
                    easily group orders by pair, side, strategy, etc. This
                    allows clients to more readily cancel or query information
                    about orders in a particular group, with fewer API calls by
                    using `userref` instead of our `txid`, where supported.
                  type: integer
                  format: int32
                ordertype:
                  description: |
                    Order type
                  type: string
                  enum:
                    - market
                    - limit
                    - stop-loss
                    - take-profit
                    - stop-loss-limit
                    - take-profit-limit
                    - settle-position
                type:
                  description: Order direction (buy/sell)
                  type: string
                  enum:
                    - buy
                    - sell
                volume:
                  description: >
                    Order quantity in terms of the base asset

                    > Note: Volume can be specified as `0` for closing margin
                    orders to automatically fill the requisite quantity.
                  type: string
                pair:
                  description: Asset pair `id` or `altname`
                  type: string
                price:
                  description: >
                    Price


                    * Limit price for `limit` orders

                    * Trigger price for `stop-loss`, `stop-loss-limit`,
                    `take-profit` and `take-profit-limit` orders
                  type: string
                price2:
                  description: >
                    Secondary Price


                    * Limit price for `stop-loss-limit` and `take-profit-limit`
                    orders


                    >  Note: Either `price` or `price2` can be preceded by `+`,
                    `-`, or `#` to specify the order price as an offset relative
                    to the last traded price. `+` adds the amount to, and `-`
                    subtracts the amount from the last traded price. `#` will
                    either add or subtract the amount to the last traded price,
                    depending on the direction and order type used. Relative
                    prices can be suffixed with a `%` to signify the relative
                    amount as a percentage.
                  type: string
                trigger:
                  description: >
                    Price signal used to trigger `stop-loss`, `stop-loss-limit`,
                    `take-profit` and `take-profit-limit` orders.

                    >  Note: This `trigger` type will as well be used for
                    associated conditional close orders.
                  type: string
                  enum:
                    - index
                    - last
                  default: last
                leverage:
                  description: |
                    Amount of leverage desired (default = none)
                  type: string
                oflags:
                  description: |
                    Comma delimited list of order flags

                      * `post` post-only order (available when ordertype = limit)
                      * `fcib` prefer fee in base currency (default if selling)
                      * `fciq` prefer fee in quote currency (default if buying, mutually exclusive with `fcib`)
                      * `nompp` disable [market price protection](https://support.kraken.com/hc/en-us/articles/201648183-Market-Price-Protection) for market orders
                  type: string
                timeinforce:
                  description: >
                    Time-in-force of the order to specify how long it should
                    remain in the order book before being cancelled. GTC
                    (Good-'til-cancelled) is default if the parameter is
                    omitted. IOC (immediate-or-cancel) will immediately execute
                    the amount possible and cancel any remaining balance rather
                    than resting in the book. GTD (good-'til-date), if
                    specified, must coincide with a desired `expiretm`.
                  type: string
                  enum:
                    - GTC
                    - IOC
                    - GTD
                  default: GTC
                starttm:
                  description: >
                    Scheduled start time. Can be specified as an absolute
                    timestamp or as a number of seconds in the future.
                      * `0` now (default)
                      * `+<n>` schedule start time <n> seconds from now
                      * `<n>` = unix timestamp of start time
                  type: string
                expiretm:
                  description: |
                    Expiration time
                      * `0` no expiration (default)
                      * `+<n>` = expire <n> seconds from now, minimum 5 seconds
                      * `<n>` = unix timestamp of expiration time
                  type: string
                close[ordertype]:
                  description: >
                    Conditional close order type. 

                    > Note: [Conditional close
                    orders](https://support.kraken.com/hc/en-us/articles/360038640052-Conditional-Close)
                    are triggered by execution of the primary order in the same
                    quantity and opposite direction, but once triggered are
                    __independent orders__ that may reduce or increase net
                    position.  
                  type: string
                  enum:
                    - limit
                    - stop-loss
                    - take-profit
                    - stop-loss-limit
                    - take-profit-limit
                close[price]:
                  description: |
                    Conditional close order `price`
                  type: string
                close[price2]:
                  description: |
                    Conditional close order `price2`
                  type: string
                deadline:
                  type: string
                  description: >
                    RFC3339 timestamp (e.g. 2021-04-01T00:18:45Z) after which
                    the matching engine should reject the new order request, in
                    presence of latency or order queueing. min now() + 5
                    seconds, max now() + 60 seconds. 
                validate:
                  type: boolean
                  description: Validate inputs only. Do not submit order.
                  default: false
      responses:
        '200':
          description: Order added.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    title: OrderAdded
                    type: object
                    properties:
                      descr:
                        description: Order description info
                        type: object
                        properties:
                          order:
                            description: Order description
                            type: string
                          close:
                            description: Conditional close order description, if applicable
                            type: string
                      txid:
                        description: >
                          Transaction IDs for order

                          <br><sup><sub>(if order was added
                          successfully)</sup></sub>
                        type: array
                        items:
                          type: string
                  error:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiError'
              examples:
                cURL (Limit with conditional stop-loss):
                  value:
                    error: []
                    result:
                      descr:
                        order: >-
                          buy 2.12340000 XBTUSD @ limit 45000.1 with 2:1
                          leverage
                        close: close position @ stop loss 38000.0 -> limit 36000.0
                      txid:
                        - OUF4EM-FRGI2-MQMWZD
                Python (Limit):
                  value:
                    error: []
                    result:
                      descr:
                        order: buy 1.25000000 XBTUSD @ limit 27500.0
                      txid:
                        - OU22CG-KLAF2-FWUDD7
      x-codeSamples:
        - lang: cURL
          source: |
            // buy 2.1234 XBTUSD @ limit $45,000.1
            // with 2:1 leverage, with a follow up stop loss

            curl -X "POST" "https://api.kraken.com/0/private/AddOrder" \
                 -H 'API-Key: <YOUR-API-KEY>' \
                 -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \
                 -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \
                 --data-urlencode "nonce=<YOUR-NONCE>"
                 --data-urlencode "pair=XXBTZUSD" \
                 --data-urlencode "type=buy" \
                 --data-urlencode "ordertype=limit" \
                 --data-urlencode "price=45000.1" \
                 --data-urlencode "volume=2.1234" \
                 --data-urlencode "leverage=2:1" \
                 --data-urlencode "close[ordertype]=stop-loss-limit" \
                 --data-urlencode "close[price]=38000" \
                 --data-urlencode "close[price2]=36000"
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/AddOrder', {
                "nonce": str(int(1000*time.time())),
                "ordertype": "limit",
                "type": "buy",
                "volume": 1.25,
                "pair": "XBTUSD",
                "price": 27500
            }, api_key, api_sec)

            print(resp.json())
  /private/CancelOrder:
    post:
      summary: Cancel Order
      description: >
        Cancel a particular open order (or set of open orders) by `txid` or
        `userref`
      tags:
        - User Trading
      operationId: cancelOrder
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Cancel Open Order Request Body
              required:
                - nonce
                - txid
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                txid:
                  description: Open order transaction ID (txid) or user reference (userref)
                  oneOf:
                    - type: string
                    - type: integer
      responses:
        '200':
          description: Open order cancelled.
          content:
            application/json:
              schema:
                example:
                  error: []
                  result:
                    count: 1
                type: object
                properties:
                  result:
                    title: OrderCancelled
                    type: object
                    properties:
                      count:
                        description: Number of orders cancelled.
                        type: integer
                        format: int32
                      pending:
                        description: if set, order(s) is/are pending cancellation
                        type: boolean
                  error:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl -X "POST" "https://api.kraken.com/0/private/CancelOrder" \
                 -H 'API-Key: <YOUR-API-KEY>' \
                 -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \
                 -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \
                 --data-urlencode "nonce=<YOUR-NONCE>"
                 --data-urlencode "txid=OYVGEW-VYV5B-UUEXSK"
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/CancelOrder', {
                "nonce": str(int(1000*time.time())),
                "txid": "OG5V2Y-RYKVL-DT3V3B"
            }, api_key, api_sec)

            print(resp.json())
  /private/CancelAll:
    post:
      summary: Cancel All Orders
      description: |
        Cancel all open orders
      tags:
        - User Trading
      operationId: cancelAllOrders
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
      x-codeSamples:
        - lang: cURL
          source: |
            curl -X "POST" "http://api.kraken.com/0/private/CancelAll" \
                -H 'API-Key: <YOUR-API-KEY>' \
                -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \
                -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \
                --data-urlencode "nonce=<YOUR-NONCE>"  
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            resp = kraken_request('/0/private/CancelAll', {
                "nonce": str(int(1000*time.time()))
            }, api_key, api_sec)

            print(resp.json())      
      responses:
        '200':
          description: Open orders cancelled.
          content:
            application/json:
              example:
                error: []
                result:
                  count: 4
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      count:
                        description: Number of orders that were cancelled
                        type: integer
                  error:
                    $ref: '#/components/schemas/ApiError'
  /private/CancelAllOrdersAfter:
    post:
      summary: Cancel All Orders After X
      tags:
        - User Trading
      operationId: cancelAllOrdersAfter
      description: >
        CancelAllOrdersAfter provides a "Dead Man's Switch" mechanism to protect
        the client from network malfunction, extreme latency or unexpected
        matching engine downtime. The client can send a request with a timeout
        (in seconds), that will start a countdown timer which will cancel *all*
        client orders when the timer expires. The client has to keep sending new
        requests to push back the trigger time, or deactivate the mechanism by
        specifying a timeout of 0. If the timer expires, all orders are
        cancelled and then the timer remains disabled until the client provides
        a new (non-zero) timeout.


        The recommended use is to make a call every 15 to 30 seconds, providing
        a timeout of 60 seconds. This allows the client to keep the orders in
        place in case of a brief disconnection or transient delay, while keeping
        them safe in case of a network breakdown. It is also recommended to
        disable the timer ahead of regularly scheduled trading engine
        maintenance (if the timer is enabled, all orders will be cancelled when
        the trading engine comes back from downtime - planned or otherwise).
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
                - timeout
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                timeout:
                  type: integer
                  description: Duration (in seconds) to set/extend the timer by
      responses:
        '200':
          description: Dead man's switch timer reset or disabled.
          content:
            application/json:
              example:
                error: []
                result:
                  currentTime: '2021-03-24T17:41:56Z'
                  triggerTime: '2021-03-24T17:42:56Z'
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      currentTime:
                        description: >-
                          Timestamp (RFC3339 format) at which the request was
                          received
                        type: string
                      triggerTime:
                        description: >-
                          Timestamp (RFC3339 format) after which all orders will
                          be cancelled, unless the timer is extended or disabled
                        type: string
                  error:
                    $ref: '#/components/schemas/ApiError'
      x-codeSamples:
        - lang: cURL
          source: >
            curl -X "POST"
            "http://api.kraken.com/0/private/CancelAllOrdersAfter" \
                -H 'API-Key: <YOUR-API-KEY>' \
                -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \
                -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \
                --data-urlencode "nonce=<YOUR-NONCE>" \
                --data-urlencode "timeout=60" 
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/CancelAllOrdersAfter', {
                "nonce": str(int(1000*time.time())),
                "timeout": 60
            }, api_key, api_sec)

            print(resp.json())       
  /private/DepositMethods:
    post:
      summary: Get Deposit Methods
      description: |
        Retrieve methods available for depositing a particular asset.      
      tags:
        - User Funding
      operationId: getDepositMethods
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Get Desposit Methods Request Body
              required:
                - nonce
                - asset
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                asset:
                  description: Asset being deposited
                  type: string
      responses:
        '200':
          description: Deposit methods retrieved.
          content:
            application/json:
              schema:
                example:
                  error: []
                  result:
                    - method: Bitcoin
                      limit: false
                      fee: '0.0000000000'
                      gen-address: true
                type: object
                properties:
                  result:
                    type: array
                    items:
                      title: depositMethod
                      description: Deposit Method
                      type: object
                      properties:
                        method:
                          description: Name of deposit method
                          type: string
                        limit:
                          description: >-
                            Maximum net amount that can be deposited right now,
                            or false if no limit
                        fee:
                          description: Amount of fees that will be paid
                          type: string
                        address-setup-fee:
                          description: Whether or not method has an address setup fee
                          type: string
                        gen-address:
                          type: boolean
                          description: >-
                            Whether new addresses can be generated for this
                            method.
                  error:
                    $ref: '#/components/schemas/ApiError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl -X "POST" "http://api.kraken.com/0/private/DepositMethods" \
                 -H 'API-Key: <YOUR-API-KEY>' \
                 -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \
                 -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \
                 --data-urlencode "nonce=<YOUR-NONCE>" \
                 --data-urlencode "asset=XBT"
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/DepositMethods', {
                "nonce": str(int(1000*time.time())),
                "asset": "XBT"
            }, api_key, api_sec)

            print(resp.json())
  /private/DepositAddresses:
    post:
      summary: Get Deposit Addresses
      description: >
        Retrieve (or generate a new) deposit addresses for a particular asset
        and method.
      tags:
        - User Funding
      operationId: getDepositAddresses
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
                - asset
                - method
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                asset:
                  description: Asset being deposited
                  type: string
                method:
                  description: Name of the deposit method
                  type: string
                new:
                  description: Whether or not to generate a new address
                  type: boolean
                  default: false
      responses:
        '200':
          description: Deposit addresses retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      title: depositAddress
                      description: Deposit Address
                      type: object
                      properties:
                        address:
                          description: Deposit Address
                          type: string
                        expiretm:
                          description: >-
                            Expiration time in unix timestamp, or 0 if not
                            expiring
                          type: string
                        new:
                          description: Whether or not address has ever been used
                          type: boolean
                  error:
                    $ref: '#/components/schemas/ApiError'
              example:
                error: []
                result:
                  - address: 2N9fRkx5JTWXWHmXzZtvhQsufvoYRMq9ExV
                    expiretm: '0'
                    new: true
                  - address: 2NCpXUCEYr8ur9WXM1tAjZSem2w3aQeTcAo
                    expiretm: '0'
                    new: true
                  - address: 2Myd4eaAW96ojk38A2uDK4FbioCayvkEgVq
                    expiretm: '0'
      x-codeSamples:
        - lang: cURL
          source: |
            curl -X "POST" "http://api.kraken.com/0/private/DepositAddresses" \
                 -H 'API-Key: <YOUR-API-KEY>' \
                 -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \
                 -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \
                 --data-urlencode "nonce=<YOUR-NONCE>" \
                 --data-urlencode "asset=XBT" \
                 --data-urlencode "method=Bitcoin"
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/DepositAddresses', {
                "nonce": str(int(1000*time.time())),
                "asset": "XBT",
                "method": "Bitcoin",
                "new": True
            }, api_key, api_sec)

            print(resp.json())
  /private/DepositStatus:
    post:
      summary: Get Status of Recent Deposits
      description: |
        Retrieve information about recent deposits made.      
      tags:
        - User Funding
      operationId: getStatusRecentDeposits
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Get Status of Recent Deposits Request Body
              required:
                - nonce
                - asset
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                asset:
                  description: Asset being deposited
                  type: string
                method:
                  description: Name of the deposit method
                  type: string
      responses:
        '200':
          description: Recent deposits retrieved.
          content:
            application/json:
              schema:
                example:
                  error: []
                  result:
                    - method: Bitcoin
                      aclass: currency
                      asset: XXBT
                      refid: QGBCOYA-UNP53O-F2JDNS
                      txid: >-
                        6544b41b607d8b2512baf801755a3a87b6890eacdb451be8a94059fb11f0a8d9
                      info: 2Myd4eaAW96ojk38A2uDK4FbioCayvkEgVq
                      amount: '0.78125000'
                      fee: '0.0000000000'
                      time: 1546992722
                      status: Success
                    - method: Bitcoin
                      aclass: currency
                      asset: XXBT
                      refid: QGBHU3O-73ARA5-IFCFZT
                      txid: >-
                        fe12122222fe7fb1bc756a10ecd25f93015e959810ff1daf56535b9b01a803af
                      info: 2Myd4eaAW96ojk38A2uDK4FbioCayvkEgVq
                      amount: '0.78125000'
                      time: 1546992722
                      status: Settled
                type: object
                properties:
                  result:
                    type: array
                    items:
                      title: Deposit
                      description: Deposit
                      type: object
                      properties:
                        method:
                          description: Name of deposit method
                          type: string
                        aclass:
                          description: Asset class
                          type: string
                        asset:
                          description: Asset
                          type: string
                        refid:
                          description: Reference ID
                          type: string
                        txid:
                          description: Method transaction ID
                          type: string
                        info:
                          description: Method transaction information
                          type: string
                        amount:
                          description: Amount deposited
                          type: string
                        fee:
                          description: Fees paid
                        time:
                          description: Unix timestamp when request was made
                          type: integer
                          format: int32
                        status:
                          description: >
                            Status of deposit<br>

                            <sup><sub>For information about the status, please
                            refer to the [IFEX financial transaction
                            states](https://github.com/globalcitizen/ifex-protocol/blob/master/draft-ifex-00.txt#L837).</sup></sub>
                        status-prop:
                          description: >
                            Addition status properties <sup><sub>(if
                            available)</sup></sub><br>
                              * `return` A return transaction initiated by Kraken
                              * `onhold` Deposit is on hold pending review
                          type: string
                          enum:
                            - return
                            - onhold
                  error:
                    $ref: '#/components/schemas/ApiError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl -X "POST" "http://api.kraken.com/0/private/DepositStatus" \
                 -H 'API-Key: <YOUR-API-KEY>' \
                 -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \
                 -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \
                 --data-urlencode "nonce=<YOUR-NONCE>" \
                 --data-urlencode "asset=XBT" \
                 --data-urlencode "method=Bitcoin"
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/DepositStatus', {
                "nonce": str(int(1000*time.time())),
                "asset": "XBT"
            }, api_key, api_sec)

            print(resp.json())
  /private/WithdrawInfo:
    post:
      summary: Get Withdrawal Information
      description: >
        Retrieve fee information about potential withdrawals for a particular
        asset, key and amount.      
      tags:
        - User Funding
      operationId: getWithdrawalInformation
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
                - asset
                - key
                - amount
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                asset:
                  description: Asset being withdrawn
                  type: string
                key:
                  description: Withdrawal key name, as set up on your account
                  type: string
                amount:
                  description: Amount to be withdrawn
                  type: string
      responses:
        '200':
          description: Withdrawal information retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    title: withdrawalInfo
                    description: Withdrawal Info
                    type: object
                    properties:
                      method:
                        description: Name of the withdrawal method that will be used
                        type: string
                      limit:
                        description: Maximum net amount that can be withdrawn right now
                        type: string
                      amount:
                        description: Net amount that will be sent, after fees
                        type: string
                      fee:
                        description: Amount of fees that will be paid
                        type: string
                  error:
                    $ref: '#/components/schemas/ApiError'
              example:
                error: []
                result:
                  method: Bitcoin
                  limit: '332.00956139'
                  amount: '0.72485000'
                  fee: '0.00015000'
      x-codeSamples:
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/WithdrawInfo', {
                "nonce": str(int(1000*time.time())),
                "asset": "XBT",
                "key": "btc_testnet_with1",
                "amount": 0.725
            }, api_key, api_sec)

            print(resp.json())
  /private/Withdraw:
    post:
      summary: Withdraw Funds
      description: |
        Make a withdrawal request.      
      tags:
        - User Funding
      operationId: withdrawFunds
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
                - asset
                - key
                - amount
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                asset:
                  description: Asset being withdrawn
                  type: string
                key:
                  description: Withdrawal key name, as set up on your account
                  type: string
                amount:
                  description: Amount to be withdrawn
                  type: string
      responses:
        '200':
          description: Withdrawal created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      refid:
                        type: string
                        description: Reference ID
                  error:
                    $ref: '#/components/schemas/ApiError'
              example:
                error: []
                result:
                  refid: AGBSO6T-UFMTTQ-I7KGS6
      x-codeSamples:
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/Withdraw', {
                "nonce": str(int(1000*time.time())),
                "asset": "XBT",
                "key": "btc_testnet_with1",
                "amount": 0.725
            }, api_key, api_sec)

            print(resp.json())
  /private/WithdrawStatus:
    post:
      summary: Get Status of Recent Withdrawals
      description: |
        Retrieve information about recently requests withdrawals.      
      tags:
        - User Funding
      operationId: getStatusRecentWithdrawals
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Get Status of Recent Withdrawals Request Body
              required:
                - nonce
                - asset
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                asset:
                  description: Asset being withdrawn
                  type: string
                method:
                  description: Name of the withdrawal method
                  type: string
      responses:
        '200':
          description: Recent withdrawals retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      title: Withdrawal
                      description: Withdrawal
                      type: object
                      properties:
                        method:
                          description: Name of withdrawal method
                          type: string
                        aclass:
                          description: Asset class
                          type: string
                        asset:
                          description: Asset
                          type: string
                        refid:
                          description: Reference ID
                          type: string
                        txid:
                          description: Method transaction ID
                          type: string
                        info:
                          description: Method transaction information
                          type: string
                        amount:
                          description: Amount withdrawn
                          type: string
                        fee:
                          description: Fees paid
                        time:
                          description: Unix timestamp when request was made
                          type: integer
                          format: int32
                        status:
                          description: >
                            Status of withdraw<br>

                            <sup><sub>For information about the status, please
                            refer to the [IFEX financial transaction
                            states](https://github.com/globalcitizen/ifex-protocol/blob/master/draft-ifex-00.txt#L837).</sup></sub>
                          type: string
                          enum:
                            - Initial
                            - Pending
                            - Settled
                            - Success
                            - Failure
                        status-prop:
                          description: >
                            Addition status properties <sup><sub>(if
                            available)</sup></sub><br>
                              * `cancel-pending` cancelation requested
                              * `canceled` canceled
                              * `cancel-denied` cancelation requested but was denied
                              * `return` a return transaction initiated by Kraken; it cannot be canceled
                              * `onhold` withdrawal is on hold pending review
                          type: string
                          enum:
                            - cancel-pending
                            - canceled
                            - cancel-denied
                            - return
                            - onhold
                  error:
                    $ref: '#/components/schemas/ApiError'
              example:
                error: []
                result:
                  - method: Bitcoin
                    aclass: currency
                    asset: XXBT
                    refid: AGBZNBO-5P2XSB-RFVF6J
                    txid: null
                    info: mzp6yUVMRxfasyfwzTZjjy38dHqMX7Z3GR
                    amount: '0.72485000'
                    fee: '0.00015000'
                    time: 1617014586
                    status: Pending
                  - method: Bitcoin
                    aclass: currency
                    asset: XXBT
                    refid: AGBSO6T-UFMTTQ-I7KGS6
                    txid: null
                    info: mzp6yUVMRxfasyfwzTZjjy38dHqMX7Z3GR
                    amount: '0.72485000'
                    fee: '0.00015000'
                    time: 1617015423
                    status: Failure
                    status-prop: canceled
      x-codeSamples:
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/WithdrawStatus', {
                "nonce": str(int(1000*time.time())),
                "asset": "XBT"
            }, api_key, api_sec)

            print(resp.json())
  /private/WithdrawCancel:
    post:
      summary: Request Withdrawal Cancelation
      description: >
        Cancel a recently requested withdrawal, if it has not already been
        successfully processed.       
      tags:
        - User Funding
      operationId: cancelWithdrawal
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              title: Request Withdrawal Cancelation Request Body
              required:
                - nonce
                - asset
                - refid
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                asset:
                  description: Asset being withdrawn
                  type: string
                refid:
                  description: Withdrawal reference ID
                  type: string
      responses:
        '200':
          description: Withdrawal cancellation requested.
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: boolean
                    description: Whether cancellation was successful or not.
                  error:
                    $ref: '#/components/schemas/ApiError'
              example:
                error: []
                result: true
  /private/WalletTransfer:
    post:
      summary: Request Wallet Transfer
      description: >-
        Transfer from Kraken spot wallet to Kraken Futures holding wallet. Note
        that a transfer in the other direction must be requested via the Kraken
        Futures [API
        endpoint](https://support.kraken.com/hc/en-us/articles/360028105972-Withdrawal-to-Spot-Wallet).
      tags:
        - User Funding
      operationId: walletTransfer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
                - asset
                - from
                - to
                - amount
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                asset:
                  type: string
                  description: Asset to transfer (asset ID or `altname`)
                  example: XBT
                from:
                  type: string
                  description: Source wallet
                  enum:
                    - Spot Wallet
                to:
                  type: string
                  description: Destination wallet
                  enum:
                    - Futures Wallet
                amount:
                  type: string
                  description: Amount to transfer
      responses:
        '200':
          description: Transfer created.
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: object
                    properties:
                      refid:
                        type: string
                        description: Reference ID
                        example: BOG5AE5-KSCNR4-VPNPEV
                  error:
                    $ref: '#/components/schemas/ApiError'
      x-codeSamples:
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/WalletTransfer', {
                "nonce": str(int(1000*time.time())),
                "asset": "ETH",
                "amount": 0.100,
                "from":"Spot Wallet",
                "to":"Futures Wallet"
            }, api_key, api_sec)

            print(resp.json())
  /private/Stake:
    post:
      summary: Stake Asset
      description: >-
        Stake an asset from your spot wallet. This operation requires an API key
        with `Withdraw funds` permission.
      tags:
        - User Staking
      operationId: stake
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
                - asset
                - amount
                - method
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                asset:
                  type: string
                  description: Asset to stake (asset ID or `altname`)
                  example: XBT
                amount:
                  type: string
                  description: Amount of the asset to stake
                method:
                  type: string
                  description: >-
                    Name of the staking option to use (refer to the Staking
                    Assets endpoint for the correct method names for each asset)
      responses:
        '200':
          description: Staking successful.
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: object
                    properties:
                      refid:
                        type: string
                        description: Reference ID
                        example: BOG5AE5-KSCNR4-VPNPEV
                  error:
                    $ref: '#/components/schemas/ApiError'
              example:
                error: []
                result:
                  refid: BOG5AE5-KSCNR4-VPNPEV
      x-codeSamples:
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/Stake', {
                "nonce": str(int(1000*time.time())),
                "asset": "XXBT",
                "amount": 0.1,
                "method": "staked-xbt"
            }, api_key, api_sec)

            print(resp.json())
  /private/Unstake:
    post:
      summary: Unstake Asset
      description: >-
        Unstake an asset from your staking wallet. This operation requires an
        API key with `Withdraw funds` permission.
      tags:
        - User Staking
      operationId: unstake
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
                - asset
                - amount
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
                asset:
                  type: string
                  description: >-
                    Asset to unstake (asset ID or `altname`). Must be a valid
                    staking asset (e.g. `XBT.M`, `XTZ.S`, `ADA.S`)
                  example: XBT.M
                amount:
                  type: string
                  description: Amount of the asset to stake
      responses:
        '200':
          description: Unstaking successful.
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: object
                    properties:
                      refid:
                        type: string
                        description: Reference ID
                        example: BOG5AE5-KSCNR4-VPNPEV
                  error:
                    $ref: '#/components/schemas/ApiError'
              example:
                error: []
                result:
                  refid: BOG5AE5-KSCNR4-VPNPEV
      x-codeSamples:
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/Unstake', {
                "nonce": str(int(1000*time.time())),
                "asset": "XXBT",
                "amount": 0.1,
                "method": "staked-xbt"
            }, api_key, api_sec)

            print(resp.json())
  /private/Staking/Assets:
    post:
      summary: List of Stakeable Assets
      description: >
        Returns the list of assets that the user is able to stake. This
        operation

        requires an API key with both `Withdraw funds` and `Query funds`
        permission.
      tags:
        - User Staking
      operationId: getStakingAssetInfo
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
      responses:
        '200':
          description: List of stakeable assets retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: array
                    items:
                      title: Staking Asset Information
                      type: object
                      required:
                        - asset
                        - name
                        - staking_name
                        - staking_asset
                        - rewards
                      properties:
                        asset:
                          description: Asset code/name
                          type: string
                        staking_asset:
                          description: Staking asset code/name
                          type: string
                        method:
                          description: >-
                            Unique ID of the staking option (used in
                            Stake/Unstake operations)
                          type: string
                        on_chain:
                          description: Whether the staking operation is on-chain or not.
                          type: boolean
                          default: true
                        can_stake:
                          description: Whether the user will be able to stake this asset.
                          type: boolean
                          default: true
                        can_unstake:
                          description: Whether the user will be able to unstake this asset.
                          type: boolean
                          default: true
                        minimum_amount:
                          description: Minimium amounts for staking/unstaking.
                          type: object
                          required:
                            - unstaking
                            - staking
                          properties:
                            unstaking:
                              type: string
                              default: '0'
                            staking:
                              type: string
                              default: '0'
                        lock:
                          description: >-
                            Describes the locking periods and percentages for
                            staking/unstaking operations.
                          type: object
                          properties:
                            unstaking:
                              type: array
                              items:
                                $ref: '#/components/schemas/StakingLockInfo'
                            staking:
                              type: array
                              items:
                                $ref: '#/components/schemas/StakingLockInfo'
                            lockup:
                              type: array
                              items:
                                $ref: '#/components/schemas/StakingLockInfo'
                        enabled_for_user:
                          type: boolean
                          default: true
                        disabled:
                          type: boolean
                        rewards:
                          description: Describes the rewards earned while staking.
                          type: object
                          properties:
                            reward:
                              description: Reward earned while staking
                              type: string
                            type:
                              description: Reward type
                              type: string
                              enum:
                                - percentage
                  error:
                    $ref: '#/components/schemas/ApiError'
  /private/Staking/Pending:
    post:
      summary: Get Pending Staking Transactions
      description: >
        Returns the list of pending staking transactions. Once resolved, these
        transactions

        will appear on the `List of Staking Transactions` endpoint.


        This operation requires an API key with both `Query funds` and `Withdraw
        funds` permissions.
      tags:
        - User Staking
      operationId: getStakingPendingDeposits
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
      responses:
        '200':
          description: Pending transactions retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: array
                    items:
                      title: Staking Transaction Info
                      type: object
                      properties:
                        refid:
                          description: The reference ID of the transaction.
                          type: string
                        type:
                          description: The type of transaction.
                          type: string
                          enum:
                            - bonding
                            - reward
                            - unbonding
                        asset:
                          description: Asset code/name
                          type: string
                        amount:
                          description: The transaction amount
                          type: string
                        time:
                          description: Unix timestamp when the transaction was initiated.
                          type: string
                        bond_start:
                          description: >-
                            Unix timestamp from the start of bond period
                            (applicable only to `bonding` transactions).
                          type: integer
                        bond_end:
                          description: >-
                            Unix timestamp of the end of bond period (applicable
                            only to `bonding` transactions).
                          type: integer
                        status:
                          description: Transaction status
                          type: string
                          enum:
                            - Initial
                            - Pending
                            - Settled
                            - Success
                            - Failure
                  error:
                    $ref: '#/components/schemas/ApiError'
              example:
                result:
                  - method: ada-staked
                    aclass: currency
                    asset: ADA.S
                    refid: RUSB7W6-ESIXUX-K6PVTM
                    amount: '0.34844300'
                    fee: '0.00000000'
                    time: 1622967367
                    status: Initial
                    type: bonding
                  - method: xtz-staked
                    aclass: currency
                    asset: XTZ.S
                    refid: RUCXX7O-6MWQBO-CQPGAX
                    amount: '0.00746900'
                    fee: '0.00000000'
                    time: 1623074402
                    status: Initial
                    type: bonding
                error: []
      x-codeSamples:
        - lang: Python
          source: |
            import time
            import os
            import requests

            # Read Kraken API key and secret stored in environment variables
            api_url = "https://api.kraken.com"
            api_key = os.environ['API_KEY_KRAKEN']
            api_sec = os.environ['API_SEC_KRAKEN']

            # Attaches auth headers and returns results of a POST request
            def kraken_request(uri_path, data, api_key, api_sec):
                headers = {}
                headers['API-Key'] = api_key
                # get_kraken_signature() as defined in the 'Authentication' section
                headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)
                req = requests.post((api_url + uri_path), headers=headers, data=data)
                return req

            # Construct the request and print the result
            resp = kraken_request('/0/private/Staking/Pending', {
                "nonce": str(int(1000*time.time()))
            }, api_key, api_sec)

            print(resp.json())
  /private/Staking/Transactions:
    post:
      summary: List of Staking Transactions
      description: |
        Returns the list of 1000 recent staking transactions from past 90 days.

        This operation requires an API key with `Query funds` permissions.
      tags:
        - User Staking
      operationId: getStakingTransactions
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - nonce
              properties:
                nonce:
                  $ref: "#/components/schemas/nonce"
      responses:
        '200':
          description: List of transactions retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/StakingTransactionInfo'
                  error:
                    $ref: '#/components/schemas/ApiError'
components:
  securitySchemes:
    API-Key:
      type: apiKey
      description: The "API-Key" header should contain your API key.
      name: API-Key
      in: header
    API-Sign:
      type: apiKey
      description: >
        Authenticated requests should be signed with the "API-Sign" header,
        using a signature generated with your private key, nonce, encoded
        payload, and URI path according to:

        ```none

        HMAC-SHA512 of (URI path + SHA256(nonce + POST data)) and base64 decoded
        secret API key

        ```


        ### Example Signature


        The following is a specific example of a signature generated with a
        particular private key, nonce, and payload corresponding to a new limit
        order (buy 1.25 XBTUSD at $37,500). If your code is generating a
        different signature ("API-Sign") for thie example, then there is likely
        an issue with your application of the above methodology. Code snippets
        for generating the signature in Python, Golang and Node.js follow below.


        | Field | Value |

        |-|-|

        | Private Key |
        kQH5HW/8p1uGOVjbgWA7FunAmGO8lsSUXNsu3eow76sz84Q18fWxnyRzBHCd3pd5nE9qa99HAZtuZuj6F1huXg==
        |

        | Nonce |  1616492376594 |

        | Encoded Payload |
        nonce=1616492376594&ordertype=limit&pair=XBTUSD&price=37500&type=buy&volume=1.25
        | 

        | URI Path |  /0/private/AddOrder | 

        | __API-Sign__ |
        __4/dpxb3iT4tp/ZCVEwSnEsLxx0bqyhLpdfOpc6fn7OR8+UClSV5n9E6aSS8MPtnRfp32bAb0nmbRn6H8ndwLUQ==__
        | 


        ### Code Examples


        #### Python

        ```python

        import urllib.parse

        import hashlib

        import hmac

        import base64


        def get_kraken_signature(urlpath, data, secret):

            postdata = urllib.parse.urlencode(data)
            encoded = (str(data['nonce']) + postdata).encode()
            message = urlpath.encode() + hashlib.sha256(encoded).digest()

            mac = hmac.new(base64.b64decode(secret), message, hashlib.sha512)
            sigdigest = base64.b64encode(mac.digest())
            return sigdigest.decode()

        api_sec =
        "kQH5HW/8p1uGOVjbgWA7FunAmGO8lsSUXNsu3eow76sz84Q18fWxnyRzBHCd3pd5nE9qa99HAZtuZuj6F1huXg=="


        data = {
            "nonce": "1616492376594", 
            "ordertype": "limit", 
            "pair": "XBTUSD",
            "price": 37500, 
            "type": "buy",
            "volume": 1.25
        }


        signature = get_kraken_signature("/0/private/AddOrder", data, api_sec)

        print("API-Sign: {}".format(signature))


        ```

        #### Golang [link](https://play.golang.org/p/SqP2pajUH6K)

        ```go

        package main


        import (
          "crypto/hmac"
          "crypto/sha256"
          "crypto/sha512"
          "encoding/base64"
          "net/url"
          "fmt"
        )


        func getKrakenSignature(url_path string, values url.Values, secret
        []byte) string {
          
          sha := sha256.New()
          sha.Write([]byte(values.Get("nonce") + values.Encode()))
          shasum := sha.Sum(nil)

          mac := hmac.New(sha512.New, secret)
          mac.Write(append([]byte(url_path), shasum...))
          macsum := mac.Sum(nil)
          return base64.StdEncoding.EncodeToString(macsum)
        }


        func main() {

          apiSecret := "kQH5HW/8p1uGOVjbgWA7FunAmGO8lsSUXNsu3eow76sz84Q18fWxnyRzBHCd3pd5nE9qa99HAZtuZuj6F1huXg=="

          payload := url.Values{}
          payload.Add("pair","XBTUSD")
          payload.Add("type","buy")
          payload.Add("ordertype","limit")
          payload.Add("price","37500")
          payload.Add("volume","1.25")
          payload.Add("nonce","1616492376594")

          b64DecodedSecret, _ := base64.StdEncoding.DecodeString(apiSecret)

          signature := getKrakenSignature("/0/private/AddOrder", payload, b64DecodedSecret)
          fmt.Printf("API-Sign: " + signature +"\n")
        }

        ```


        #### Node JS

        ```js

        const crypto = require('crypto');

        const qs     = require('qs');


        const getMessageSignature = (path, request, secret, nonce) => {
            const message       = qs.stringify(request);
            const secret_buffer = new Buffer(secret, 'base64');
            const hash          = new crypto.createHash('sha256');
            const hmac          = new crypto.createHmac('sha512', secret_buffer);
            const hash_digest   = hash.update(nonce + message).digest('binary');
            const hmac_digest   = hmac.update(path + hash_digest, 'binary').digest('base64');

            return hmac_digest;
        };

        ```
      name: API-Sign
      in: header
  parameters:
    AssetList:
      description: Comma delimited list of assets to get info on
      in: query
      name: asset
      schema: 
        type: string
    AssetClass:
      description: Asset Class
      in: query
      name: aclass
      required: false
      schema:
        type: string
        default: currency
    AssetPairList:
      description: Comma delimited list of asset pairs to get data for
      in: query
      name: pair
      schema:
        type: string
    AssetPair:
      description: Asset pair
      in: query
      name: pair
      schema:
        type: string
    AssetPairInfo:
      in: query
      name: pair
      schema:
        $ref: '#/components/schemas/AssetPairInfo'
    BarInterval:
      description: Time frame interval in minutes
      in: query
      name: interval
      schema: 
        type: integer
        default: 1
        enum: [1, 5, 15, 30, 60, 240, 1440, 10080, 21600]
  schemas:
    nonce:
      description: Nonce used in construction of `API-Sign` header
      type: integer
      format: int32
    ApiError:
      type: array
      items:
        description: Kraken API error
        type: string
        example: EGeneral:Invalid arguments
    SystemStatus:
      type: string
      enum: [online, maintenance, cancel_only, post_only]
      description: |
          * `online` - Kraken is operating normally. All order types may be submitted and trades can occur.
          * `maintenance` - The exchange is offline. No new orders or cancellations may be submitted.
          * `cancel_only` - Resting (open) orders can be cancelled but no new orders may be submitted. No trades will occur.
          * `post_only` - Only post-only limit orders can be submitted. Existing orders may still be cancelled. No trades will occur.
    AssetPairInfo:
      type: string
      default: info
      enum: [info, leverage, fees, margin]
      description: |
        Type of asset pair info
          * `info` = all info
          * `leverage` = leverage info
          * `fees` = fees schedule
          * `margin` = margin info
    AssetInfo:
      type: object
      properties:
        aclass:
          description: Asset class
          type: string
        altname: 
          description: Alternate name
          type: string
        decimals:
          description: Scaling decimal for record keeping
          type: integer
        display_decimals:
          description: Scaling decimal for output display
          type: integer
    AssetPairs: 
      type: object
      properties:
        altname:
          description: Alternate pair name
          type: string
        wsname:
          description: WebSocket pair name (if available)
          type: string
        aclass_base:
          description: Asset class of base component
          type: string
        base:
          description: Asset ID of base component
          type: string
        aclass_quote:
          description: Asset class of quote component
          type: string
        quote:
          description: Asset ID of quote component
          type: string
        lot:
          description: Volume lot size
          type: string
          deprecated: true
        pair_decimals:
          description: Scaling decimal places for pair
          type: integer
        lot_decimals:
          description: Scaling decimal places for volume
          type: integer
        lot_multiplier:
          description: Amount to multiply lot volume by to get currency volume
          type: integer
        leverage_buy:
          description: Array of leverage amounts available when buying
          type: array
          items:
            type: integer
        leverage_sell:
          description: Array of leverage amounts available when selling
          type: array
          items:
            type: integer
        fees:
          description: Fee schedule array in `[<volume>, <percent fee>]` tuples
          type: array
          items:
            type: array
            items:
              oneOf:
                - type: integer
                - type: number
        fees_maker:
          description: Maker fee schedule array in `[<volume>, <percentfee>]`  tuples (if on maker/taker)
          type: array
          items:
            type: array
            items:
              oneOf:
                - type: integer
                - type: number
        fee_volume_currency:
          description: Volume discount currency
          type: string
        margin_call:
          description: Margin call level
          type: integer
        margin_stop:
          description: Stop-out/liquidation margin level
          type: integer
        ordermin:
          description: Minimum order size (in terms of base currency)
          type: string
    AssetTickerInfo:
      description: Asset Ticker Info
      type: object
      properties:
        a:
          description: Ask `[<price>, <whole lot volume>, <lot volume>]`
          type: array
          items:
            type: string
        b:
          description: Bid `[<price>, <whole lot volume>, <lot volume>]`
          type: array
          items:
            type: string
        c:
          description: Last trade closed `[<price>, <lot volume>]`
          type: array
          items:
            type: string
        v:
          description: Volume `[<today>, <last 24 hours>]`
          type: array
          items:
            type: string
        p:
          description: >-
            Volume weighted average price `[<today>, <last 24 hours>]`
          type: array
          items:
            type: string
        t:
          description: Number of trades `[<today>, <last 24 hours>]`
          type: array
          items:
            type: integer
        l:
          description: Low `[<today>, <last 24 hours>]`
          type: array
          items:
            type: string
        h:
          description: High `[<today>, <last 24 hours>]`
          type: array
          items:
            type: string
        o:
          description: Today's opening price
          type: string
    TickData:
      description: >
        Tick data.

        `[int <time>, string <open>, string <high>, string
        <low>, string <close>, string <vwap>, string <volume>,
        int <count>]`
      type: array
      items:
        minItems: 8
        maxItems: 8
        oneOf:
          - type: string
          - type: integer
    OrderBook:
      description: | 
        Asset Pair Order Book Entries
      type: object
      properties:
        asks:
          description: |
            Ask side array of entries `[<price>, <volume>, <timestamp>]`
          type: array
          items:
            oneOf:
              - type: string
              - type: integer
        bid:
          description: >-
            Bid side array of entries `[<price>, <volume>, <timestamp>]`
          type: array
          items:
            oneOf:
              - type: string
              - type: integer
    SpreadData:
      description: |
        Array of spread entries `[int <time>, string <bid>, string <ask>]`
      type: array
      items:
        oneOf:
          - type: string
          - type: integer
    AccountBalance:
      title: AccountBalance
      description: Cash balances, exlcluding pending withdrawals
      type: object
      additionalProperties:
        x-additionalPropertiesName: asset
        type: string
        description: balance
    TradeBalance:
      description: Account Balance
      type: object
      properties:
        eb:
          description: >-
            Equivalent balance (combined balance of all currencies)
          type: string
        tb:
          description: >-
            Trade balance (combined balance of all equity currencies)
          type: string
        m:
          description: Margin amount of open positions
          type: string
        n:
          description: Unrealized net profit/loss of open positions
          type: string
        c:
          description: Cost basis of open positions
          type: string
        v:
          description: Current floating valuation of open positions
          type: string
        e:
          description: 'Equity: `trade balance + unrealized net profit/loss`'
          type: string
        mf:
          description: >-
            Free margin: `Equity - initial margin (maximum margin
            available to open new positions)`
          type: string
        ml:
          description: 'Margin level: `(equity / initial margin) * 100`'
          type: string
    OrderStatus:
      type: string
      enum: [pending, open, closed, canceled, expired]
      description: |
        Status of order
          * pending - order pending book entry
          * open - open order
          * closed - closed order
          * canceled - order canceled
          * expired - order expired
    OrderSide:
      type: string
      enum: [buy, sell]
      description: |
        Order side
          * buy - buy side
          * sell - sell side
    OrderType:
      type: string
      enum: [market, limit, stop-loss, take-profit, stop-loss-limit, take-profit-limit, settle-position]
    OrderDescription:
      description: Order description info
      type: object
      properties:
        pair:
          description: Asset pair
          type: string
        type:
          $ref: '#/components/schemas/OrderSide'
        ordertype:
          $ref: '#/components/schemas/OrderType'
        price:
          description: primary price
          type: string
        price2:
          description: Secondary price
          type: string
        leverage:
          description: Amount of leverage
          type: string
        order:
          description: Order description
          type: string
        close:
          description: Conditional close order description (if conditional close set)
          type: string
    OrderTrigger:
      type: string
      enum: [last, index]
      default: last
      description: | 
            Price signal used to trigger "stop-loss"
            "take-profit" "stop-loss-limit"
            "take-profit-limit" orders.
              * `last` is the implied trigger if this field is not set.
    OrderMiscInfo:
      description: |
        Comma delimited list of miscellaneous info

          * `stopped` triggered by stop price
          * `touched` triggered by touch price
          * `liquidated` liquidation
          * `partial` partial fill
      type: string
    OrderFlags:
      description: |
        Comma delimited list of order flags

          * `post` post-only order (available when ordertype = limit)
          * `fcib` prefer fee in base currency (default if selling)
          * `fciq` prefer fee in quote currency (default if buying, mutually exclusive with `fcib`)
          * `nompp` disable [market price protection](https://support.kraken.com/hc/en-us/articles/201648183-Market-Price-Protection) for market orders
      type: string
    OpenOrder:
      description: Open Order
      type: object
      properties:
        refid:
          description: Referral order transaction ID that created this order
          type: string
        userref:
          description: User reference id
          type: string
        status:
          $ref: '#/components/schemas/OrderStatus'
        opentm:
          description: Unix timestamp of when order was placed
          type: number
        starttm:
          description: Unix timestamp of order start time (or 0 if not set)
          type: number
        expiretm:
          description: Unix timestamp of order end time (or 0 if not set)
          type: number
        descr:
          $ref: '#/components/schemas/OrderDescription'
        vol:
          description: Volume of order (base currency)
          type: string
        vol_exec:
          description: Volume executed (base currency)
          type: string
        cost:
          description: Total cost (quote currency unless)
          type: string
        fee:
          description: Total fee (quote currency)
          type: string
        price:
          description: Average price (quote currency)
          type: string
        stopprice:
          description: Stop price (quote currency)
          type: string
        limitprice:
          description: Triggered limit price (quote currency, when limit based order type triggered)
          type: string
        trigger:
          $ref: '#/components/schemas/OrderTrigger'
        misc:
          $ref: '#/components/schemas/OrderMiscInfo'
        oflags:
          $ref: '#/components/schemas/OrderFlags'
        trades:
          description: >-
            List of trade IDs related to order (if
            trades info requested and data available)
          type: array
          items:
            type: string
    ClosedOrder:
      description: Closed order
      allOf:
        - $ref: '#/components/schemas/OpenOrder'
        - type: object
          properties:
            closetm:
              description: Unix timestamp of when order was closed
              type: number
            reason:
              description: Additional info on status (if any)
              type: string
    PositionStatus:
      description: Position status
      type: string
      enum: [open, closed]
    Trade:
      description: Trade info
      type: object
      properties:
        ordertxid:
          description: Order responsible for execution of trade
          type: string
        pair:
          description: Asset pair
          type: string
        time:
          description: Unix timestamp of trade
          type: number
        type:
          $ref: '#/components/schemas/OrderSide'
        ordertype:
          $ref: '#/components/schemas/OrderType'
        price:
          description: Average price order was executed at (quote currency)
          type: string
        cost:
          description: Total cost of order (quote currency)
          type: string
        fee:
          description: Total fee (quote currency)
          type: string
        vol:
          description: Volume (base currency)
          type: string
        margin:
          description: Initial margin (quote currency)
          type: string
        misc:
          description: >
            Comma delimited list of miscellaneous info:

            * `closing` &mdash; Trade closes all or part of a
            position
          type: string
        posstatus:
          $ref: '#/components/schemas/PositionStatus'
          description: >
            Position status (open/closed)
            <br><sub><sup>Only present if trade opened a
            position</sub></sup>
        cprice:
          description: >
            Average price of closed portion of position (quote
            currency)

            <br><sub><sup>Only present if trade opened a
            position</sub></sup>
        ccost:
          description: >
            Total cost of closed portion of position (quote
            currency)

            <br><sub><sup>Only present if trade opened a
            position</sub></sup>
        cfee:
          description: >
            Total fee of closed portion of position (quote
            currency)

            <br><sub><sup>Only present if trade opened a
            position</sub></sup>
        cvol:
          description: >
            Total fee of closed portion of position (quote
            currency)

            <br><sub><sup>Only present if trade opened a
            position</sub></sup>
        cmargin:
          description: >
            Total margin freed in closed portion of position
            (quote currency)

            <br><sub><sup>Only present if trade opened a
            position</sub></sup>
        net:
          description: >
            Net profit/loss of closed portion of position (quote
            currency, quote currency scale)

            <br><sub><sup>Only present if trade opened a
            position</sub></sup>
        trades:
          description: >
            List of closing trades for position (if available)

            <br><sub><sup>Only present if trade opened a
            position</sub></sup>
          type: array
          items:
            type: string

    Position: 
      description: Position info
      type: object
      properties:
        ordertxid:
          type: string
          description: Order ID responsible for the position
        posstatus:
          $ref: '#/components/schemas/PositionStatus'
        pair:
          type: string
          description: Asset pair
        time:
          type: number
          description: Unix timestamp of trade
        type:
          $ref: '#/components/schemas/OrderSide'
        ordertype:
          $ref: '#/components/schemas/OrderType'
        cost:
          type: string
          description: Opening cost of position (in quote currency)
        fee:
          type: string
          description: Opening fee of position (in quote currency)
        vol:
          type: string
          description: Position opening size (in base currency)
        vol_closed:
          type: string
          description: Quantity closed (in base currency)
        margin:
          type: string
          description: Initial margin consumed (in quote currency)
        value:
          type: string
          description: >-
            Current value of remaining position (if `docalcs` requested)
        net:
          type: string
          description: >-
            Unrealised P&L of remaining position (if `docalcs` requested)
        terms:
          type: string
          description: Funding cost and term of position
        rollovertm:
          type: string
          description: Timestamp of next margin rollover fee
        misc:
          type: string
          description: Comma delimited list of add'l info
        oflags:
          type: string
          description: Comma delimited list of opening order flags
    LedgerEntryType:
      description: Type of ledger entry
      type: string
      enum:
            - trade
            - deposit
            - withdraw
            - transfer
            - margin
            - rollover
            - spend
            - receive
            - settled
            - adjustment
    LedgerEntry:
      description: Ledger entry
      type: object
      properties:
        refid:
          description: Reference Id
          type: string
        time:
          description: Unix timestamp of ledger
          type: number
        type:
          $ref: '#/components/schemas/LedgerEntryType'
        subtype:
          description: >-
            Additional info relating to the ledger entry type,
            where applicable
          type: string
        aclass:
          description: Asset class
          type: string
        asset:
          description: Asset
          type: string
        amount:
          description: Transaction amount
          type: string
        fee:
          description: Transaction fee
          type: string
        balance:
          description: Resulting balance
          type: string
    FeeTierInfo:
      title: FeeTierInfo
      description: Fee Tier Info
      type: object
      properties:
        fee:
          description: Current fee (in percent)
          type: string
        min_fee:
          description: minimum fee for pair (if not fixed fee)
          type: string
        max_fee:
          description: maximum fee for pair (if not fixed fee)
          type: string
        next_fee:
          description: >-
            next tier's fee for pair (if not fixed fee, 
            null if at lowest fee tier)
          type: string
          nullable: true
        tier_volume:
          description: >-
            volume level of current tier (if not fixed fee.
            null if at lowest fee tier)
          type: string
          nullable: true
        next_volume:
          description: >-
            volume level of next tier (if not fixed fee.
            null if at lowest fee tier)
          type: string
          nullable: true

    TradeVolume:
      description: Trade Volume
      type: object
      properties:
        currency:
          description: Volume currency
          type: string
        volume:
          description: Current discount volume
          type: string
        fees:
          type: object
          additionalProperties:
            x-additionalPropertiesName: pair
            allOf: 
              - $ref: '#/components/schemas/FeeTierInfo'
        fees_maker:
          type: object
          additionalProperties:
            x-additionalPropertiesName: pair
            allOf:
              - $ref: '#/components/schemas/FeeTierInfo'
    StakingLockInfo:
      type: object
      required:
        - days
        - percentage
      properties:
        days:
          description: Days the funds are locked.
          type: number
        percentage:
          description: >-
            Percentage of the funds that are locked (0
            - 100)
          type: number
          minimum: 0
          maximum: 100
    StakingTransactionInfo:
      title: Staking Transaction Info
      type: object
      properties:
        refid:
          description: The reference ID of the transaction.
          type: string
        type:
          description: The type of transaction.
          type: string
          enum:
            - bonding
            - reward
            - unbonding
        asset:
          description: Asset code/name
          type: string
        amount:
          description: The transaction amount
          type: string
        time:
          description: Unix timestamp when the transaction was initiated.
          type: string
        bond_start:
          description: >-
            Unix timestamp from the start of bond period
            (applicable only to `bonding` transactions).
          type: integer
        bond_end:
          description: >-
            Unix timestamp of the end of bond period (applicable
            only to `bonding` transactions).
          type: integer
        status:
          description: Transaction status
          type: string
          enum:
            - Initial
            - Pending
            - Settled
            - Success
            - Failure
    OrderAdded:
      description: New order response
      type: object
      properties:
        descr:
          description: Order description info
          type: object
          properties:
            order:
              description: Order description
              type: string
            close:
              description: Conditional close order description, if applicable
              type: string
        txid:
          description: >
            Transaction IDs for order

            <br><sup><sub>(if order was added
            successfully)</sup></sub>
          type: array
          items:
            type: string
    OrderEdited:
      description: New order response
      type: object
      properties:
        descr:
          description: Order description info
          type: object
          properties:
            order:
              description: Order description
              type: string
        txid:
          description: New transaction ID
          type: array
          items:
            type: string
        newuserref:
          description: New userref if passed with the request
          type: string
        olduserref:
          description: Original userref if passed with the request
          type: string
        orders_cancelled:
          description: Number of orders cancelled
          type: integer
          minimum: 0
          maximum: 1
        originaltxid:
          description: Original transaction ID
          type: string
        status:
          description: Status of the order (Ok or Err)
          type: string
          enum: [ok, err]
        volume:
          description: Updated volume
          type: string
        price:
          description: Updated price
          type: string
        price2:
          description: Updated price2
          type: string
        error_message:
          description: Error message if unsuccessful
          type: string
    OrderCancelled:
      title: OrderCancelled
      type: object
      properties:
        count:
          description: Number of orders cancelled.
          type: integer
          format: int32
        pending:
          description: if set, order(s) is/are pending cancellation
          type: boolean
    DepositMethod:
      title: DepositMethod
      description: Deposit method
      type: object
      properties:
        method:
          description: Name of deposit method
          type: string
        limit:
          description: >-
            Maximum net amount that can be deposited right now,
            or false if no limit
        fee:
          description: Amount of fees that will be paid
          type: string
        address-setup-fee:
          description: Whether or not method has an address setup fee
          type: string
        gen-address:
          type: boolean
          description: >-
            Whether new addresses can be generated for this
            method.
    DepositAddress:
      title: DepositAddress
      description: Deposit Address
      type: object
      properties:
        address:
          description: Deposit Address
          type: string
        expiretm:
          description: >-
            Expiration time in unix timestamp, or 0 if not
            expiring
          type: string
        new:
          description: Whether or not address has ever been used
          type: boolean
    Deposit:
      title: Deposit
      description: Deposit
      type: object
      properties:
        method:
          description: Name of deposit method
          type: string
        aclass:
          description: Asset class
          type: string
        asset:
          description: Asset
          type: string
        refid:
          description: Reference ID
          type: string
        txid:
          description: Method transaction ID
          type: string
        info:
          description: Method transaction information
          type: string
        amount:
          description: Amount deposited
          type: string
        fee:
          description: Fees paid
        time:
          description: Unix timestamp when request was made
          type: integer
          format: int32
        status:
          description: >
            Status of deposit<br>

            <sup><sub>For information about the status, please
            refer to the [IFEX financial transaction
            states](https://github.com/globalcitizen/ifex-protocol/blob/master/draft-ifex-00.txt#L837).</sup></sub>
        status-prop:
          description: >
            Addition status properties <sup><sub>(if
            available)</sup></sub><br>
              * `return` A return transaction initiated by Kraken
              * `onhold` Deposit is on hold pending review
          type: string
          enum:
            - return
            - onhold
    WithdrawalInfo:
      title: WithdrawalInfo
      description: Withdrawal Info
      type: object
      properties:
        method:
          description: Name of the withdrawal method that will be used
          type: string
        limit:
          description: Maximum net amount that can be withdrawn right now
          type: string
        amount:
          description: Net amount that will be sent, after fees
          type: string
        fee:
          description: Amount of fees that will be paid
          type: string
    WithdrawalStatus:
      description: >
        Status of withdraw<br>

        <sup><sub>For information about the status, please
        refer to the [IFEX financial transaction
        states](https://github.com/globalcitizen/ifex-protocol/blob/master/draft-ifex-00.txt#L837).</sup></sub>
      type: string
      enum:
        - Initial
        - Pending
        - Settled
        - Success
        - Failure
    Withdrawal:
      title: Withdrawal
      description: Withdrawal
      type: object
      properties:
        method:
          description: Name of withdrawal method
          type: string
        aclass:
          description: Asset class
          type: string
        asset:
          description: Asset
          type: string
        refid:
          description: Reference ID
          type: string
        txid:
          description: Method transaction ID
          type: string
        info:
          description: Method transaction information
          type: string
        amount:
          description: Amount withdrawn
          type: string
        fee:
          description: Fees paid
        time:
          description: Unix timestamp when request was made
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/WithdrawalStatus'
        status-prop:
          description: >
            Addition status properties <sup><sub>(if
            available)</sup></sub><br>
              * `cancel-pending` cancelation requested
              * `canceled` canceled
              * `cancel-denied` cancelation requested but was denied
              * `return` a return transaction initiated by Kraken; it cannot be canceled
              * `onhold` withdrawal is on hold pending review
          type: string
          enum:
            - cancel-pending
            - canceled
            - cancel-denied
            - return
            - onhold
security:
  - API-Key: []
    API-Sign: []
tags:
  - name: Market Data
  - name: User Data
  - name: User Trading
  - name: User Funding
x-tagGroups:
  - name: Public Endpoints
    tags:
      - Market Data
  - name: Authenticated Endpoints
    tags:
      - User Data
      - User Trading
      - User Funding
      - User Staking
      - Websockets Authentication